{"version":3,"file":"themeUtils.test.js","sourceRoot":"","sources":["../../../src/styles/themeUtils.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAChD,OAAO,EAAE,aAAa,EAAE,aAAa,EAAE,eAAe,EAAE,MAAM,cAAc,CAAC;AAE7E,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACxC,IAAI,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC9C,MAAM,UAAU,GAAG;YACjB,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE;YACpB,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE;YACvB,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;YACrB,EAAE,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE;SACzB,CAAC;QAEF,MAAM,WAAW,GAAG;YAClB,KAAK,EAAE,KAAK;YACZ,QAAQ,EAAE;gBACR,+BAA+B,EAAE;oBAC/B,KAAK,EAAE,QAAQ;iBAChB;gBACD,+BAA+B,EAAE;oBAC/B,KAAK,EAAE,MAAM;iBACd;gBACD,+BAA+B,EAAE;oBAC/B,QAAQ,EAAE,MAAM;iBACjB;aACF;SACF,CAAC;QAEF,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,IAAI,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC9C,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;QAC1E,MAAM,CAAC,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC;YACvD,QAAQ,EAAE;gBACR,+BAA+B,EAAE;oBAC/B,OAAO,EAAE,QAAQ;iBAClB;aACF;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,IAAI,CAAC,0DAA0D,EAAE,GAAG,EAAE;QACpE,MAAM,MAAM,GAAG;YACb,KAAK,EAAE;gBACL,QAAQ,EAAE,KAAK;gBACf,MAAM,EAAE,KAAK;gBACb,KAAK,EAAE,KAAK;gBACZ,KAAK,EAAE;oBACL,IAAI,EAAE,KAAK;iBACZ;aACF;YACD,QAAQ,EAAE,iBAAiB;YAC3B,MAAM,EAAE,iBAAiB;YACzB,KAAK,EAAE,iBAAiB;YACxB,QAAQ,EAAE,iBAAiB;SAC5B,CAAC;QAEF,MAAM,eAAe,GAAG;YACtB,gBAAgB,EAAE,KAAK;YACvB,cAAc,EAAE,KAAK;YACrB,aAAa,EAAE,KAAK;YACpB,kBAAkB,EAAE,KAAK;YACzB,QAAQ,EAAE,iBAAiB;YAC3B,MAAM,EAAE,iBAAiB;YACzB,KAAK,EAAE,iBAAiB;SACzB,CAAC;QAEF,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, expect, test } from 'vitest';\nimport { flattenTokens, mapToProperty, responsiveStyle } from './themeUtils';\n\ndescribe('responsiveStyle function', () => {\n  test('creates style properties correctly', () => {\n    const styleInput = {\n      xs: { color: 'red' },\n      sm: { color: 'purple' },\n      md: { color: 'blue' },\n      lg: { fontSize: '20px' },\n    };\n\n    const styleOutput = {\n      color: 'red',\n      '@media': {\n        'screen and (min-width: 40rem)': {\n          color: 'purple',\n        },\n        'screen and (min-width: 48rem)': {\n          color: 'blue',\n        },\n        'screen and (min-width: 64rem)': {\n          fontSize: '20px',\n        },\n      },\n    };\n\n    expect(responsiveStyle(styleInput)).toEqual(styleOutput);\n  });\n});\n\ndescribe('mapToProperty function', () => {\n  test('creates style properties correctly', () => {\n    expect(mapToProperty('gridRow')('span 1')).toEqual({ gridRow: 'span 1' });\n    expect(mapToProperty('gridRow', 'md')('span 2')).toEqual({\n      '@media': {\n        'screen and (min-width: 48rem)': {\n          gridRow: 'span 2',\n        },\n      },\n    });\n  });\n});\n\ndescribe('flattenTokens function', () => {\n  test('creates a flattened object with concatenated token names', () => {\n    const border = {\n      width: {\n        hairline: '1px',\n        normal: '2px',\n        thick: '4px',\n        other: {\n          test: '5px',\n        },\n      },\n      hairline: '1px solid black',\n      normal: '2px solid black',\n      thick: '3px solid black',\n      '@hover': '1px solid black',\n    };\n\n    const flattenedBorder = {\n      'width.hairline': '1px',\n      'width.normal': '2px',\n      'width.thick': '4px',\n      'width.other.test': '5px',\n      hairline: '1px solid black',\n      normal: '2px solid black',\n      thick: '3px solid black',\n    };\n\n    expect(flattenTokens(border)).toEqual(flattenedBorder);\n  });\n});\n"]}