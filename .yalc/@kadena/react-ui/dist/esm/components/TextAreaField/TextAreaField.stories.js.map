{"version":3,"file":"TextAreaField.stories.js","sourceRoot":"","sources":["../../../../src/components/TextAreaField/TextAreaField.stories.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,MAAM,2BAA2B,CAAC;AAE1D,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAExC,MAAM,IAAI,GAA8B;IACtC,KAAK,EAAE,oBAAoB;IAC3B,SAAS,EAAE,aAAa;IACxB,UAAU,EAAE;QACV,IAAI,EAAE;YACJ,WAAW,EAAE;gBACX,SAAS,EACP,sIAAsI;aACzI;SACF;KACF;IACD,QAAQ,EAAE;QACR,QAAQ,EAAE;YACR,WAAW,EAAE,gDAAgD;YAC7D,OAAO,EAAE;gBACP,IAAI,EAAE,SAAS;aAChB;YACD,KAAK,EAAE;gBACL,IAAI,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE;gBAC5B,YAAY,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE;aACnC;SACF;QAED,aAAa,EAAE;YACb,WAAW,EAAE,iCAAiC;YAC9C,OAAO,EAAE;gBACP,IAAI,EAAE,QAAQ;aACf;YACD,KAAK,EAAE;gBACL,IAAI,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE;gBAC3B,YAAY,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE;aACnC;SACF;KACF;CACF,CAAC;AAEF,eAAe,IAAI,CAAC;AAIpB,MAAM,CAAC,MAAM,cAAc,GAAU;IACnC,IAAI,EAAE,kBAAkB;IACxB,IAAI,EAAE;QACJ,QAAQ,EAAE,KAAK;QACf,GAAG,EAAE,KAAK;QACV,UAAU,EAAE,qBAAqB;QACjC,IAAI,EAAE,YAAY;QAClB,KAAK,EAAE,OAAO;QACd,aAAa,EAAE;YACb,EAAE,EAAE,gBAAgB;YACpB,UAAU,EAAE,OAAO;YACnB,WAAW,EAAE,uBAAuB;YACpC,KAAK,EAAE,EAAE;YACT,QAAQ,EAAE,GAAG,EAAE,GAAE,CAAC;SACnB;KACF;IACD,MAAM,EAAE,CAAC,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG,IAAI,EAAE,EAAE,EAAE;QAC/C,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAS,EAAE,CAAC,CAAC;QAE/C,OAAO,CACL,oBAAC,aAAa,IACZ,QAAQ,EAAE,QAAQ,EAClB,aAAa,EAAE;gBACb,GAAG,aAAa;gBAChB,KAAK;gBACL,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC;aACjD,KACG,IAAI,GACR,CACH,CAAC;IACJ,CAAC;CACF,CAAC","sourcesContent":["import type { ITextAreaFieldProps } from '@components/TextAreaField';\nimport { TextAreaField } from '@components/TextAreaField';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport React, { useState } from 'react';\n\nconst meta: Meta<ITextAreaFieldProps> = {\n  title: 'Form/TextAreaField',\n  component: TextAreaField,\n  parameters: {\n    docs: {\n      description: {\n        component:\n          'The TextAreaField component is a wrapper around the native textarea element that provides the ability to add additional information.',\n      },\n    },\n  },\n  argTypes: {\n    disabled: {\n      description: 'Disables the input and applies visual styling.',\n      control: {\n        type: 'boolean',\n      },\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: 'false' },\n      },\n    },\n\n    textAreaProps: {\n      description: 'Props for the textarea element.',\n      control: {\n        type: 'object',\n      },\n      table: {\n        type: { summary: 'object' },\n        defaultValue: { summary: 'false' },\n      },\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ITextAreaFieldProps>;\n\nexport const TextFieldStory: Story = {\n  name: 'TextField config',\n  args: {\n    disabled: false,\n    tag: 'tag',\n    helperText: 'This is helper text',\n    info: '(optional)',\n    label: 'Label',\n    textAreaProps: {\n      id: 'TextFieldStory',\n      fontFamily: '$mono',\n      placeholder: 'This is a placeholder',\n      value: '',\n      onChange: () => {},\n    },\n  },\n  render: ({ disabled, textAreaProps, ...rest }) => {\n    const [value, setValue] = useState<string>('');\n\n    return (\n      <TextAreaField\n        disabled={disabled}\n        textAreaProps={{\n          ...textAreaProps,\n          value,\n          onChange: ({ target }) => setValue(target.value),\n        }}\n        {...rest}\n      />\n    );\n  },\n};\n"]}