{"version":3,"file":"Button.js","sourceRoot":"","sources":["../../../../src/components/Button/Button.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAC9C,OAAO,EAAE,MAAM,YAAY,CAAC;AAO5B,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EACL,WAAW,EACX,kBAAkB,EAClB,kBAAkB,EAClB,cAAc,EACd,cAAc,EACd,gBAAgB,GACjB,MAAM,cAAc,CAAC;AA0BtB,MAAM,CAAC,MAAM,MAAM,GAAqB,CAAC,EACvC,MAAM,GAAG,KAAK,EACd,EAAE,GAAG,QAAQ,EACb,OAAO,GAAG,KAAK,EACf,QAAQ,EACR,KAAK,GAAG,SAAS,EACjB,IAAI,EACJ,IAAI,EACJ,SAAS,GAAG,OAAO,EACnB,OAAO,EACP,MAAM,EACN,KAAK,GAAG,EAAE,EACV,IAAI,EACJ,OAAO,GAAG,SAAS,EACnB,GAAG,SAAS,EACb,EAAE,EAAE;;IACH,MAAM,SAAS,GAAG,MAAA,SAAS,CAAC,YAAY,CAAC,mCAAI,KAAK,CAAC;IACnD,MAAM,cAAc,GAAG,EAAE,KAAK,GAAG,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,EAAE,CAAC;IAEvE,IAAI,IAAI,GAAG,IAAI,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;IACpC,IAAI,OAAO,EAAE;QACX,IAAI,GAAG,UAAU,CAAC,OAAO,CAAC;KAC3B;IAED,MAAM,aAAa,GAAG,GAAW,EAAE;QACjC,QAAQ,OAAO,EAAE;YACf,KAAK,SAAS;gBACZ,OAAO,cAAc,CAAC,KAAK,CAAC,CAAC;YAC/B,KAAK,aAAa;gBAChB,OAAO,kBAAkB,CAAC,KAAK,CAAC,CAAC;YACnC;gBACE,OAAO,cAAc,CAAC,KAAK,CAAC,CAAC;SAChC;IACH,CAAC,CAAC;IAEF,MAAM,eAAe,GAAG,EAAE,CAAC,aAAa,EAAE,EAAE;QAC1C,CAAC,kBAAkB,CAAC,EAAE,OAAO;QAC7B,CAAC,WAAW,CAAC,EAAE,MAAM;KACtB,CAAC,CAAC;IAEH,MAAM,aAAa,GAAG,EAAE,CAAC;QACvB,CAAC,gBAAgB,CAAC,EAAE,OAAO;KAC5B,CAAC,CAAC;IAEH,MAAM,WAAW,GAAG,CAAC,YAAuB,EAAa,EAAE,CAAC,CAC1D;QACG,IAAI,IAAI,SAAS,KAAK,MAAM,IAAI,CAC/B,oBAAC,IAAI,IAAC,IAAI,EAAC,IAAI,EAAC,SAAS,EAAE,aAAa,GAAI,CAC7C;QACA,YAAY;QACZ,IAAI,IAAI,SAAS,KAAK,OAAO,IAAI,CAChC,oBAAC,IAAI,IAAC,IAAI,EAAC,IAAI,EAAC,SAAS,EAAE,aAAa,GAAI,CAC7C,CACA,CACJ,CAAC;IAEF,IAAI,OAAO,IAAI,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;QAC7C,OAAO,KAAK,CAAC,YAAY,CAAC,QAAQ,EAAE;YAClC,GAAG,SAAS;YACZ,GAAG,QAAQ,CAAC,KAAK;YACjB,SAAS;YACT,QAAQ,EAAE,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC;YAC9C,SAAS,EAAE,eAAe;SAC3B,CAAC,CAAC;KACJ;IAED,IAAI,cAAc,EAAE;QAClB,OAAO,CACL,yCACc,SAAS,EACrB,SAAS,EAAE,eAAe,iBACd,YAAY,EACxB,IAAI,EAAE,IAAI,EACV,MAAM,EAAE,MAAM,IAEb,WAAW,CAAC,QAAQ,CAAC,CACpB,CACL,CAAC;KACH;IAED,OAAO,CACL,mCACM,SAAS,gBACD,SAAS,EACrB,SAAS,EAAE,eAAe,EAC1B,IAAI,EAAE,IAAI,IAET,WAAW,CAAC,QAAQ,CAAC,CACf,CACV,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { SystemIcon } from '@components/Icon';\nimport cn from 'classnames';\nimport type {\n  ButtonHTMLAttributes,\n  FC,\n  HTMLAttributeAnchorTarget,\n  ReactNode,\n} from 'react';\nimport React from 'react';\nimport type { colorVariants, typeVariants } from './Button.css';\nimport {\n  activeClass,\n  alternativeVariant,\n  buttonLoadingClass,\n  compactVariant,\n  defaultVariant,\n  iconLoadingClass,\n} from './Button.css';\n\nexport interface IButtonProps\n  extends Omit<\n    ButtonHTMLAttributes<HTMLButtonElement>,\n    'as' | 'disabled' | 'className'\n  > {\n  active?: boolean;\n  as?: 'button' | 'a';\n  asChild?: boolean;\n  children: React.ReactNode;\n  color?: keyof typeof colorVariants;\n  disabled?: boolean;\n  href?: string;\n  icon?: keyof typeof SystemIcon;\n  iconAlign?: 'left' | 'right';\n  loading?: boolean;\n  onClick?:\n    | React.MouseEventHandler<HTMLButtonElement>\n    | React.FormEventHandler<HTMLButtonElement>;\n  target?: HTMLAttributeAnchorTarget;\n  title?: string;\n  type?: 'button' | 'submit' | 'reset';\n  variant?: keyof typeof typeVariants;\n}\n\nexport const Button: FC<IButtonProps> = ({\n  active = false,\n  as = 'button',\n  asChild = false,\n  children,\n  color = 'primary',\n  href,\n  icon,\n  iconAlign = 'right',\n  loading,\n  target,\n  title = '',\n  type,\n  variant = 'default',\n  ...restProps\n}) => {\n  const ariaLabel = restProps['aria-label'] ?? title;\n  const renderAsAnchor = as === 'a' && href !== undefined && href !== '';\n\n  let Icon = icon && SystemIcon[icon];\n  if (loading) {\n    Icon = SystemIcon.Loading;\n  }\n\n  const buttonVariant = (): string => {\n    switch (variant) {\n      case 'compact':\n        return compactVariant[color];\n      case 'alternative':\n        return alternativeVariant[color];\n      default:\n        return defaultVariant[color];\n    }\n  };\n\n  const buttonClassname = cn(buttonVariant(), {\n    [buttonLoadingClass]: loading,\n    [activeClass]: active,\n  });\n\n  const iconClassname = cn({\n    [iconLoadingClass]: loading,\n  });\n\n  const getContents = (linkContents: ReactNode): ReactNode => (\n    <>\n      {Icon && iconAlign === 'left' && (\n        <Icon size=\"md\" className={iconClassname} />\n      )}\n      {linkContents}\n      {Icon && iconAlign === 'right' && (\n        <Icon size=\"md\" className={iconClassname} />\n      )}\n    </>\n  );\n\n  if (asChild && React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      ...restProps,\n      ...children.props,\n      ariaLabel,\n      children: getContents(children.props.children),\n      className: buttonClassname,\n    });\n  }\n\n  if (renderAsAnchor) {\n    return (\n      <a\n        aria-label={ariaLabel}\n        className={buttonClassname}\n        data-testid=\"kda-button\"\n        href={href}\n        target={target}\n      >\n        {getContents(children)}\n      </a>\n    );\n  }\n\n  return (\n    <button\n      {...restProps}\n      aria-label={ariaLabel}\n      className={buttonClassname}\n      type={type}\n    >\n      {getContents(children)}\n    </button>\n  );\n};\n"]}