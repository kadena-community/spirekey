{"version":3,"file":"GridItem.js","sourceRoot":"","sources":["../../../../../src/components/Layout/Grid/GridItem.tsx"],"names":[],"mappings":"AAAA,OAAO,UAAU,MAAM,YAAY,CAAC;AAEpC,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,aAAa,EAAE,kBAAkB,EAAE,eAAe,EAAE,MAAM,YAAY,CAAC;AAShF,MAAM,0BAA0B,GAAG,CACjC,UAA+B,EACZ,EAAE;IACrB,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;QAClC,OAAO,kBAAkB,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC;KAC1C;IAED,OAAO,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;QACrD,OAAO,kBAAkB,CAAC,GAAsC,CAAC,CAAC,KAAK,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,QAAQ,GAAuB,CAAC,EAC3C,SAAS,EACT,QAAQ,EACR,UAAU,EACV,OAAO,GAAG,CAAC,GACZ,EAAE,EAAE;IACH,OAAO,CACL,6BACE,SAAS,EAAE,UAAU,CACnB,aAAa,EACb,eAAe,CAAC,OAAO,CAAC,EACxB,UAAU,IAAI,0BAA0B,CAAC,UAAU,CAAC,EACpD,SAAS,CACV,IAEA,QAAQ,CACL,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import classnames from 'classnames';\nimport type { FC, ReactNode } from 'react';\nimport React from 'react';\nimport type { ResponsiveInputType } from './Grid.css';\nimport { gridItemClass, itemColumnVariants, rowSpanVariants } from './Grid.css';\n\nexport interface IGridItemProps {\n  className?: string;\n  children?: ReactNode;\n  columnSpan?: ResponsiveInputType;\n  rowSpan?: keyof typeof rowSpanVariants;\n}\n\nconst assembleColumnSpanVariants = (\n  columnSpan: ResponsiveInputType,\n): string | string[] => {\n  if (typeof columnSpan === 'number') {\n    return itemColumnVariants.xs[columnSpan];\n  }\n\n  return Object.entries(columnSpan).map(([key, value]) => {\n    return itemColumnVariants[key as keyof typeof itemColumnVariants][value];\n  });\n};\n\nexport const GridItem: FC<IGridItemProps> = ({\n  className,\n  children,\n  columnSpan,\n  rowSpan = 1,\n}) => {\n  return (\n    <div\n      className={classnames(\n        gridItemClass,\n        rowSpanVariants[rowSpan],\n        columnSpan && assembleColumnSpanVariants(columnSpan),\n        className,\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n"]}