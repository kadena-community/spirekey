{"version":3,"file":"Grid.js","sourceRoot":"","sources":["../../../../../src/components/Layout/Grid/Grid.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AACjD,OAAO,UAAU,MAAM,YAAY,CAAC;AAEpC,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EACL,uBAAuB,EACvB,WAAW,EACX,kBAAkB,GACnB,MAAM,YAAY,CAAC;AAiCpB,MAAM,sBAAsB,GAAG,CAC7B,OAA4B,EACT,EAAE;IACrB,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;QAC/B,OAAO,uBAAuB,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;KAC5C;IAED,OAAO,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;QAClD,OAAO,uBAAuB,CAAC,GAA2C,CAAC,CACzE,KAAK,CACN,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,IAAI,GAAmB,CAAC,EACnC,SAAS,EACT,QAAQ,EACR,OAAO,EACP,GAAG,GAAG,KAAK,EACX,MAAM,EACN,MAAM,EACN,YAAY,EACZ,UAAU,EACV,WAAW,EACX,SAAS,EACT,OAAO,EACP,OAAO,EACP,SAAS,EACT,QAAQ,EACR,SAAS,EACT,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,aAAa,EACb,WAAW,EACX,YAAY,EACZ,UAAU,EACV,QAAQ,EACR,QAAQ,EACR,KAAK,GACN,EAAE,EAAE;IACH,MAAM,SAAS,GAAG,UAAU,CAC1B,WAAW,CAAC,GAAG,CAAC,EAChB,kBAAkB,EAClB,OAAO,IAAI,sBAAsB,CAAC,OAAO,CAAC,EAC1C,SAAS,CAAC;QACR,MAAM;QACN,MAAM;QACN,YAAY;QACZ,UAAU;QACV,WAAW;QACX,SAAS;QACT,OAAO;QACP,OAAO;QACP,SAAS;QACT,QAAQ;QACR,SAAS;QACT,QAAQ;QACR,QAAQ;QACR,OAAO;QACP,aAAa;QACb,WAAW;QACX,YAAY;QACZ,UAAU;QACV,QAAQ;QACR,QAAQ;QACR,KAAK;KACN,CAAC,EACF,SAAS,CACV,CAAC;IACF,OAAO,6BAAK,SAAS,EAAE,SAAS,IAAG,QAAQ,CAAO,CAAC;AACrD,CAAC,CAAC","sourcesContent":["import type { Sprinkles } from '@theme/sprinkles.css';\nimport { sprinkles } from '@theme/sprinkles.css';\nimport classNames from 'classnames';\nimport type { FC, ReactNode } from 'react';\nimport React from 'react';\nimport type { ResponsiveInputType } from './Grid.css';\nimport {\n  containerColumnVariants,\n  gapVariants,\n  gridContainerClass,\n} from './Grid.css';\n\nexport interface IGridProps\n  extends Pick<\n    Sprinkles,\n    | 'height'\n    | 'margin'\n    | 'marginBottom'\n    | 'marginLeft'\n    | 'marginRight'\n    | 'marginTop'\n    | 'marginX'\n    | 'marginY'\n    | 'maxHeight'\n    | 'maxWidth'\n    | 'minHeight'\n    | 'minWidth'\n    | 'overflow'\n    | 'padding'\n    | 'paddingBottom'\n    | 'paddingLeft'\n    | 'paddingRight'\n    | 'paddingTop'\n    | 'paddingX'\n    | 'paddingY'\n    | 'width'\n  > {\n  className?: string;\n  children?: ReactNode;\n  columns?: ResponsiveInputType;\n  gap?: keyof typeof gapVariants;\n}\n\nconst assembleColumnVariants = (\n  columns: ResponsiveInputType,\n): string | string[] => {\n  if (typeof columns === 'number') {\n    return containerColumnVariants.xs[columns];\n  }\n\n  return Object.entries(columns).map(([key, value]) => {\n    return containerColumnVariants[key as keyof typeof containerColumnVariants][\n      value\n    ];\n  });\n};\n\nexport const Grid: FC<IGridProps> = ({\n  className,\n  children,\n  columns,\n  gap = '$md',\n  height,\n  margin,\n  marginBottom,\n  marginLeft,\n  marginRight,\n  marginTop,\n  marginX,\n  marginY,\n  maxHeight,\n  maxWidth,\n  minHeight,\n  minWidth,\n  overflow,\n  padding,\n  paddingBottom,\n  paddingLeft,\n  paddingRight,\n  paddingTop,\n  paddingX,\n  paddingY,\n  width,\n}) => {\n  const classList = classNames(\n    gapVariants[gap],\n    gridContainerClass,\n    columns && assembleColumnVariants(columns),\n    sprinkles({\n      height,\n      margin,\n      marginBottom,\n      marginLeft,\n      marginRight,\n      marginTop,\n      marginX,\n      marginY,\n      maxHeight,\n      maxWidth,\n      minHeight,\n      minWidth,\n      overflow,\n      padding,\n      paddingBottom,\n      paddingLeft,\n      paddingRight,\n      paddingTop,\n      paddingX,\n      paddingY,\n      width,\n    }),\n    className,\n  );\n  return <div className={classList}>{children}</div>;\n};\n"]}