{"version":3,"file":"MaskedValue.test.js","sourceRoot":"","sources":["../../../../src/components/MaskedValue/MaskedValue.test.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AACtD,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,wBAAwB,CAAC;AACxD,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAEhD,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,IAAI,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC7B,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,CAAC,oBAAC,WAAW,IAAC,KAAK,EAAC,eAAe,GAAG,CAAC,CAAC;QAEtE,MAAM,WAAW,GAAG,WAAW,CAAC,kBAAkB,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,CAAC,iBAAiB,EAAE,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACzC,MAAM,CAAC,oBAAC,WAAW,IAAC,KAAK,EAAC,eAAe,GAAG,CAAC,CAAC;QAE9C,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,4DAA4D,EAAE,GAAG,EAAE;QACtE,MAAM,CACJ,oBAAC,WAAW,IACV,KAAK,EAAC,eAAe,EACrB,mBAAmB,EAAE,CAAC,EACtB,iBAAiB,EAAE,CAAC,GACpB,CACH,CAAC;QAEF,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,8BAA8B,EAAE,GAAG,EAAE;QACxC,MAAM,CAAC,oBAAC,WAAW,IAAC,KAAK,EAAC,eAAe,EAAC,iBAAiB,EAAE,IAAI,GAAI,CAAC,CAAC;QAEvE,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,oFAAoF,EAAE,GAAG,EAAE;QAC9F,MAAM,CACJ,oBAAC,WAAW,IACV,KAAK,EAAC,eAAe,EACrB,mBAAmB,EAAE,CAAC,EACtB,iBAAiB,EAAE,CAAC,GACpB,CACH,CAAC;QAEF,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;IAChE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { MaskedValue } from '@components/MaskedValue';\nimport { render, screen } from '@testing-library/react';\nimport React from 'react';\nimport { describe, expect, test } from 'vitest';\n\ndescribe('MaskedValue', () => {\n  test('renders correctly', () => {\n    const { getByTestId } = render(<MaskedValue value=\"TestValue1234\" />);\n\n    const maskedValue = getByTestId('kda-masked-value');\n    expect(maskedValue).toBeInTheDocument();\n  });\n\n  test('shows masked value by default', () => {\n    render(<MaskedValue value=\"TestValue1234\" />);\n\n    expect(screen.getByText('TestVa***1234')).toBeInTheDocument();\n  });\n\n  test('shows correct masked value when non default characters set', () => {\n    render(\n      <MaskedValue\n        value=\"TestValue1234\"\n        startUnmaskedValues={1}\n        endUnmaskedValues={3}\n      />,\n    );\n\n    expect(screen.getByText('T****234')).toBeInTheDocument();\n  });\n\n  test('shows correct unmasked value', () => {\n    render(<MaskedValue value=\"TestValue1234\" defaultVisibility={true} />);\n\n    expect(screen.getByText('TestValue1234')).toBeInTheDocument();\n  });\n\n  test('shows unmasked value when unmasked characters are greater or equal than value size', () => {\n    render(\n      <MaskedValue\n        value=\"TestValue1234\"\n        startUnmaskedValues={8}\n        endUnmaskedValues={5}\n      />,\n    );\n\n    expect(screen.getByText('TestValue1234')).toBeInTheDocument();\n  });\n});\n"]}