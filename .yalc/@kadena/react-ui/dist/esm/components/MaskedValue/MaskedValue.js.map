{"version":3,"file":"MaskedValue.js","sourceRoot":"","sources":["../../../../src/components/MaskedValue/MaskedValue.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAE9C,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACxC,OAAO,EACL,aAAa,EACb,cAAc,EACd,cAAc,EACd,kBAAkB,GACnB,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AAUpC,MAAM,CAAC,MAAM,WAAW,GAA0B,CAAC,EACjD,KAAK,EACL,KAAK,EACL,iBAAiB,GAAG,KAAK,EACzB,mBAAmB,GAAG,CAAC,EACvB,iBAAiB,GAAG,CAAC,GACtB,EAAe,EAAE;IAChB,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,iBAAiB,CAAC,CAAC;IAE1D,MAAM,gBAAgB,GAAG,GAAS,EAAE;QAClC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC;IACvB,CAAC,CAAC;IAEF,MAAM,WAAW,GAAG,SAAS,CAAC,KAAK,EAAE;QACnC,UAAU,EAAE,mBAAmB;QAC/B,UAAU,EAAE,iBAAiB;KAC9B,CAAC,CAAC;IAEH,OAAO,CACL,4CAAiB,kBAAkB;QACjC,6BAAK,SAAS,EAAE,cAAc,IAAG,KAAK,CAAO;QAC7C,6BAAK,SAAS,EAAE,kBAAkB;YAChC,6BAAK,SAAS,EAAE,cAAc,IAAG,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,WAAW,CAAO;YACpE,OAAO,CAAC,CAAC,CAAC,CACT,oBAAC,UAAU,CAAC,aAAa,IACvB,SAAS,EAAE,aAAa,EACxB,OAAO,EAAE,gBAAgB,GACzB,CACH,CAAC,CAAC,CAAC,CACF,oBAAC,UAAU,CAAC,UAAU,IACpB,SAAS,EAAE,aAAa,EACxB,OAAO,EAAE,gBAAgB,GACzB,CACH,CACG,CACF,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["'use client';\nimport { SystemIcon } from '@components/Icon';\nimport type { FC } from 'react';\nimport React, { useState } from 'react';\nimport {\n  iconContainer,\n  titleContainer,\n  valueContainer,\n  valueIconContainer,\n} from './MaskedValue.css';\nimport { maskValue } from './utils';\n\nexport interface IMaskedValueProps {\n  title?: string;\n  value: string;\n  defaultVisibility?: boolean;\n  startUnmaskedValues?: number;\n  endUnmaskedValues?: number;\n}\n\nexport const MaskedValue: FC<IMaskedValueProps> = ({\n  title,\n  value,\n  defaultVisibility = false,\n  startUnmaskedValues = 6,\n  endUnmaskedValues = 4,\n}): JSX.Element => {\n  const [visible, setVisible] = useState(defaultVisibility);\n\n  const toggleVisibility = (): void => {\n    setVisible(!visible);\n  };\n\n  const maskedValue = maskValue(value, {\n    headLength: startUnmaskedValues,\n    tailLength: endUnmaskedValues,\n  });\n\n  return (\n    <div data-testid=\"kda-masked-value\">\n      <div className={titleContainer}>{title}</div>\n      <div className={valueIconContainer}>\n        <div className={valueContainer}>{visible ? value : maskedValue}</div>\n        {visible ? (\n          <SystemIcon.EyeOffOutline\n            className={iconContainer}\n            onClick={toggleVisibility}\n          />\n        ) : (\n          <SystemIcon.EyeOutline\n            className={iconContainer}\n            onClick={toggleVisibility}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n"]}