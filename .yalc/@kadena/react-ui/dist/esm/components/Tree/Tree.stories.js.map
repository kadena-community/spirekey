{"version":3,"file":"Tree.stories.js","sourceRoot":"","sources":["../../../../src/components/Tree/Tree.stories.tsx"],"names":[],"mappings":"AACA,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,IAAI,EAAE,MAAM,IAAI,CAAC;AAE1B,MAAM,IAAI,GAA0B;IAClC,KAAK,EAAE,iBAAiB;IACxB,UAAU,EAAE;QACV,IAAI,EAAE;YACJ,WAAW,EAAE;gBACX,SAAS,EACP,yZAAyZ;aAC5Z;SACF;KACF;IACD,QAAQ,EAAE;QACR,MAAM,EAAE;YACN,WAAW,EAAE,wBAAwB;YACrC,YAAY,EAAE,KAAK;YACnB,OAAO,EAAE;gBACP,IAAI,EAAE,SAAS;aAChB;SACF;QACD,MAAM,EAAE;YACN,WAAW,EACT,4EAA4E;YAC9E,YAAY,EAAE,KAAK;YACnB,OAAO,EAAE;gBACP,IAAI,EAAE,SAAS;aAChB;SACF;QACD,KAAK,EAAE;YACL,WAAW,EAAE,wBAAwB;YACrC,YAAY,EAAE,EAAE;YAChB,OAAO,EAAE;gBACP,IAAI,EAAE,MAAM;aACb;SACF;QACD,KAAK,EAAE;YACL,WAAW,EAAE,sBAAsB;YACnC,YAAY,EAAE,EAAE;YAChB,OAAO,EAAE;gBACP,IAAI,EAAE,OAAO;aACd;SACF;KACF;CACF,CAAC;AAEF,eAAe,IAAI,CAAC;AAGpB,MAAM,CAAC,MAAM,OAAO,GAAU;IAC5B,IAAI,EAAE,MAAM;IACZ,IAAI,EAAE;QACJ,KAAK,EAAE,QAAQ;QACf,MAAM,EAAE,IAAI;QACZ,MAAM,EAAE,KAAK;QACb,KAAK,EAAE;YACL;gBACE,KAAK,EAAE,SAAS;gBAChB,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,aAAa,EAAE,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,CAAC;gBAC3D,MAAM,EAAE,IAAI;gBACZ,MAAM,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;gBACzC,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC;aAC5C;YACD;gBACE,KAAK,EAAE,SAAS;gBAChB,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,aAAa,EAAE,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,CAAC;gBAC3D,MAAM,EAAE,IAAI;gBACZ,MAAM,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;gBACzC,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC;aAC5C;YACD;gBACE,KAAK,EAAE,SAAS;gBAChB,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,aAAa,EAAE,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,CAAC;gBAC3D,MAAM,EAAE,IAAI;gBACZ,MAAM,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;gBACzC,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC;aAC5C;SACF;KACF;IACD,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE;QAC3C,OAAO,CACL,oBAAC,IAAI,IACH,KAAK,EAAE,KAAK,EACZ,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,EACvB,KAAK,EAAE,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,EAAE,EAClB,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,GACvB,CACH,CAAC;IACJ,CAAC;CACF,CAAC","sourcesContent":["import type { Meta, StoryObj } from '@storybook/react';\nimport React from 'react';\nimport type { ITreeProps } from './';\nimport { Tree } from './';\n\nconst meta: Meta<{} & ITreeProps> = {\n  title: 'Components/Tree',\n  parameters: {\n    docs: {\n      description: {\n        component:\n          '<strong>Deprecated. Do not use.</strong><br />Will be refactored as it does not meet our standards.<br /><br /><em>The Tree component renders a tree structure with a root node and child nodes. The tree can be expanded and collapsed by clicking on the root node. The tree can be set to open by default with the `isOpen` prop. The tree can be set to close its siblings when opened with the `linked` prop.</em>',\n      },\n    },\n  },\n  argTypes: {\n    isOpen: {\n      description: 'Initial value for list',\n      defaultValue: false,\n      control: {\n        type: 'boolean',\n      },\n    },\n    linked: {\n      description:\n        'by enabling linked feature sibling trees will close their siblings on open',\n      defaultValue: false,\n      control: {\n        type: 'boolean',\n      },\n    },\n    title: {\n      description: 'root title of the tree',\n      defaultValue: '',\n      control: {\n        type: 'text',\n      },\n    },\n    items: {\n      description: 'JSON object of items',\n      defaultValue: {},\n      control: {\n        type: 'array',\n      },\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<{} & ITreeProps>;\n\nexport const Dynamic: Story = {\n  name: 'Tree',\n  args: {\n    title: 'Parent',\n    isOpen: true,\n    linked: false,\n    items: [\n      {\n        title: 'Child 1',\n        items: [{ title: 'Sub Child 1' }, { title: 'Sub Child 2' }],\n        isOpen: true,\n        onOpen: () => console.log('open child 1'),\n        onClose: () => console.log('close child 1'),\n      },\n      {\n        title: 'Child 2',\n        items: [{ title: 'Sub Child 1' }, { title: 'Sub Child 2' }],\n        isOpen: true,\n        onOpen: () => console.log('open child 2'),\n        onClose: () => console.log('close child 2'),\n      },\n      {\n        title: 'Child 3',\n        items: [{ title: 'Sub Child 1' }, { title: 'Sub Child 2' }],\n        isOpen: true,\n        onOpen: () => console.log('open child 3'),\n        onClose: () => console.log('close child 3'),\n      },\n    ],\n  },\n  render: ({ title, isOpen, items, linked }) => {\n    return (\n      <Tree\n        title={title}\n        isOpen={Boolean(isOpen)}\n        items={items ?? []}\n        linked={Boolean(linked)}\n      />\n    );\n  },\n};\n"]}