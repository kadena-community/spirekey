{"version":3,"file":"Tooltip.stories.js","sourceRoot":"","sources":["../../../../src/components/Tooltip/Tooltip.stories.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Button } from '@components/Button';\nimport { SystemIcon } from '@components/Icon';\nimport { Box, Stack } from '@components/Layout';\nimport type { ITooltipProps } from '@components/Tooltip';\nimport { Tooltip } from '@components/Tooltip';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { withCenteredStory } from '@utils/withCenteredStory';\nimport React from 'react';\n\nconst meta: Meta<ITooltipProps> = {\n  title: 'Overlays/Tooltip',\n  component: Tooltip,\n  decorators: [withCenteredStory],\n  parameters: {\n    status: {\n      type: ['releaseCandidate'],\n    },\n    docs: {\n      description: {\n        component:\n          'The Tooltip component renders a tooltip with content when the user hovers or focuses the element passed as children.',\n      },\n    },\n  },\n  argTypes: {\n    content: {\n      description:\n        'The content that will be rendered inside the tooltip. This can be a string or a ReactNode.',\n      control: {\n        type: 'text',\n      },\n    },\n    position: {\n      description:\n        'The position of the tooltip relative to the element that triggers it.',\n      table: {\n        defaultValue: { summary: 'right' },\n      },\n    },\n    delay: {\n      description:\n        'The delay in milliseconds before the tooltip is shown when the user hovers or focuses the element.',\n      table: {\n        defaultValue: { summary: 500 },\n      },\n    },\n    closeDelay: {\n      description:\n        'The delay in milliseconds before the tooltip is hidden when the user stops hovering or focusing the element.',\n      table: {\n        defaultValue: { summary: 300 },\n      },\n    },\n    isDisabled: {\n      description: 'Disables the tooltip when set to true.',\n      table: {\n        defaultValue: { summary: false },\n      },\n    },\n    isOpen: {\n      description: 'Allows the user to control the open state of the tooltip.',\n      table: {\n        defaultValue: { summary: false },\n      },\n    },\n    defaultOpen: {\n      description: 'Sets the initial open state of the tooltip.',\n      table: {\n        defaultValue: { summary: false },\n      },\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<ITooltipProps>;\n\nexport const Dynamic: Story = {\n  name: 'Tooltip with Text',\n  args: {\n    content: \"I'm a tooltip, look at me!\",\n    position: 'right',\n    isDisabled: false,\n    delay: 500,\n    closeDelay: 300,\n  },\n  render: ({ content, position, isDisabled, delay, closeDelay }) => {\n    return (\n      <Box margin=\"$25\">\n        <Tooltip\n          content={content}\n          position={position}\n          isDisabled={isDisabled}\n          delay={delay}\n          closeDelay={closeDelay}\n        >\n          <Button>Trigger</Button>\n        </Tooltip>\n      </Box>\n    );\n  },\n};\n\nexport const TooltipReactNode: Story = {\n  name: 'Tooltip with components',\n  args: {\n    position: 'right',\n    isDisabled: false,\n    delay: 500,\n    closeDelay: 300,\n  },\n  render: ({ position, isDisabled, delay, closeDelay }) => {\n    return (\n      <Box margin=\"$25\">\n        <Tooltip\n          position={position}\n          isDisabled={isDisabled}\n          delay={delay}\n          closeDelay={closeDelay}\n          content={\n            <Stack direction=\"row\" gap=\"$xs\" alignItems=\"center\">\n              <SystemIcon.AlertBox />\n              <code>I have an icon!</code>\n            </Stack>\n          }\n        >\n          <Button>Trigger</Button>\n        </Tooltip>\n      </Box>\n    );\n  },\n};\n\nexport const DefaultOpen: Story = {\n  name: 'Tooltip that is set to defaultOpen',\n  args: {\n    content: \"I'm a tooltip, look at me!\",\n    position: 'right',\n    isDisabled: false,\n    delay: 500,\n    closeDelay: 300,\n  },\n  render: ({ content, position, isDisabled, delay, closeDelay }) => {\n    return (\n      <Box margin=\"$25\">\n        <Tooltip\n          content={content}\n          position={position}\n          isDisabled={isDisabled}\n          delay={delay}\n          closeDelay={closeDelay}\n          defaultOpen={true}\n        >\n          <Button>Trigger</Button>\n        </Tooltip>\n      </Box>\n    );\n  },\n};\n\nexport const Controlled: Story = {\n  name: 'Tooltip that is controlled by a button',\n  args: {\n    content: \"I'm a tooltip, look at me!\",\n    position: 'right',\n    isDisabled: false,\n    delay: 500,\n    closeDelay: 300,\n  },\n  render: ({ content, position, isDisabled, delay, closeDelay }) => {\n    const [isOpen, setIsOpen] = React.useState(false);\n\n    return (\n      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n        <Button onClick={() => setIsOpen(!isOpen)}>\n          {isOpen ? 'Hide Tooltip' : 'Show Tooltip'}\n        </Button>\n        <Box margin=\"$25\">\n          <Tooltip\n            content={content}\n            position={position}\n            isDisabled={isDisabled}\n            delay={delay}\n            closeDelay={closeDelay}\n            isOpen={isOpen}\n          >\n            <SystemIcon.AlertBox />\n          </Tooltip>\n        </Box>\n      </Box>\n    );\n  },\n};\n"]}