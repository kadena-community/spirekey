{"version":3,"file":"TagGroup.js","sourceRoot":"","sources":["../../../../src/components/Tag/TagGroup.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,oCAAoC,CAAC;AAE3D,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,WAAW,EAAE,MAAM,YAAY,CAAC;AACzC,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAC7C,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,kBAAkB,EAAE,YAAY,EAAE,MAAM,WAAW,CAAC;AAkB7D,MAAM,CAAC,MAAM,QAAQ,GAAuB,CAAC,EAC3C,UAAU,EACV,SAAS,EACT,GAAG,SAAS,EACb,EAAE,EAAE;IACH,MAAM,EAAE,KAAK,EAAE,GAAG,SAAS,CAAC;IAC5B,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAE/B,MAAM,KAAK,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC;IACtC,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,WAAW,CAAC,SAAS,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;IAErE,OAAO,CACL,6BAAK,SAAS,EAAE,SAAS;QACtB,KAAK,IAAI,CACR,gCAAS,UAAU,IAChB,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,CAC3B,oBAAC,KAAK,IAAC,SAAS,EAAE,kBAAkB,IAAG,KAAK,CAAS,CACtD,CAAC,CAAC,CAAC,CACF,KAAK,CACN,CACG,CACP;QACD,gCAAS,SAAS,EAAE,GAAG,EAAE,GAAG,EAAE,SAAS,EAAE,YAAY,IAClD,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CACnC,oBAAC,eAAe,IACd,GAAG,EAAE,IAAI,CAAC,GAAG,EACb,IAAI,EAAE,IAAI,EACV,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,UAAU,IAElB,IAAI,CAAC,QAAQ,CACE,CACnB,CAAC,CACE,CACF,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { Label } from '@components/Typography/Label/Label';\nimport type { FC } from 'react';\nimport React from 'react';\nimport type { AriaTagGroupProps } from 'react-aria';\nimport { useTagGroup } from 'react-aria';\nimport { useListState } from 'react-stately';\nimport { InternalTagItem } from './InternalTagItem';\nimport { tagGroupLabelClass, tagListClass } from './Tag.css';\n\nexport interface ITagGroupProps\n  extends Omit<\n    AriaTagGroupProps<object>,\n    | 'description'\n    | 'errorMessage'\n    | 'selectionBehavior'\n    | 'items'\n    | 'selectionMode'\n    | 'defaultSelectedKeys'\n    | 'selectedKeys'\n    | 'onSelectionChange'\n  > {\n  className?: string;\n  tagAsChild?: boolean;\n}\n\nexport const TagGroup: FC<ITagGroupProps> = ({\n  tagAsChild,\n  className,\n  ...restProps\n}) => {\n  const { label } = restProps;\n  const ref = React.useRef(null);\n\n  const state = useListState(restProps);\n  const { gridProps, labelProps } = useTagGroup(restProps, state, ref);\n\n  return (\n    <div className={className}>\n      {label && (\n        <div {...labelProps}>\n          {typeof label === 'string' ? (\n            <Label className={tagGroupLabelClass}>{label}</Label>\n          ) : (\n            label\n          )}\n        </div>\n      )}\n      <div {...gridProps} ref={ref} className={tagListClass}>\n        {[...state.collection].map((item) => (\n          <InternalTagItem\n            key={item.key}\n            item={item}\n            state={state}\n            asChild={tagAsChild}\n          >\n            {item.rendered}\n          </InternalTagItem>\n        ))}\n      </div>\n    </div>\n  );\n};\n"]}