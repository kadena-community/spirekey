{"version":3,"file":"Notification.js","sourceRoot":"","sources":["../../../../src/components/Notification/Notification.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,oCAAoC,CAAC;AAGxE,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACxC,OAAO,EACL,gBAAgB,EAChB,YAAY,EACZ,SAAS,EACT,kBAAkB,GACnB,MAAM,oBAAoB,CAAC;AAW5B,MAAM,CAAC,MAAM,YAAY,GAA2B,CAAC,EACnD,QAAQ,EACR,aAAa,GAAG,KAAK,EACrB,MAAM,EACN,YAAY,EACZ,SAAS,EACT,IAAI,EACJ,IAAI,GACL,EAAE,EAAE;IACH,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAEtD,IAAI,WAAW;QAAE,OAAO,IAAI,CAAC;IAE7B,OAAO,CACL,6BACE,SAAS,EAAE,kBAAkB,CAAC;YAC5B,MAAM;YACN,YAAY;SACb,CAAC,EACF,IAAI,EAAE,IAAI;QAEV,8BAAM,SAAS,EAAE,SAAS,IACvB,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,oBAAC,WAAW,IAAC,IAAI,EAAC,IAAI,GAAG,CACnC;QAEP,6BAAK,SAAS,EAAE,YAAY,IAAG,QAAQ,CAAO;QAE7C,aAAa,IAAI,CAChB,gCACE,SAAS,EAAE,gBAAgB,EAC3B,OAAO,EAAE,GAAG,EAAE;gBACZ,cAAc,CAAC,IAAI,CAAC,CAAC;gBACrB,SAAS,aAAT,SAAS,uBAAT,SAAS,EAAI,CAAC;YAChB,CAAC,gBACU,oBAAoB;YAE/B,oBAAC,KAAK,IAAC,IAAI,EAAC,IAAI,GAAG,CACZ,CACV,CACG,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { Close, Information } from '@components/Icon/System/SystemIcon';\nimport type { RecipeVariants } from '@vanilla-extract/recipes';\nimport type { FC } from 'react';\nimport React, { useState } from 'react';\nimport {\n  closeButtonClass,\n  contentClass,\n  iconClass,\n  notificationRecipe,\n} from './Notification.css';\n\ntype Variants = NonNullable<RecipeVariants<typeof notificationRecipe>>;\nexport interface INotificationProps extends Variants {\n  children?: React.ReactNode;\n  isDismissable?: boolean;\n  onDismiss?: () => void;\n  icon?: React.ReactNode;\n  role: 'alert' | 'status' | 'none';\n}\n\nexport const Notification: FC<INotificationProps> = ({\n  children,\n  isDismissable = false,\n  intent,\n  displayStyle,\n  onDismiss,\n  icon,\n  role,\n}) => {\n  const [isDismissed, setIsDismissed] = useState(false);\n\n  if (isDismissed) return null;\n\n  return (\n    <div\n      className={notificationRecipe({\n        intent,\n        displayStyle,\n      })}\n      role={role}\n    >\n      <span className={iconClass}>\n        {icon ? icon : <Information size=\"md\" />}\n      </span>\n\n      <div className={contentClass}>{children}</div>\n\n      {isDismissable && (\n        <button\n          className={closeButtonClass}\n          onClick={() => {\n            setIsDismissed(true);\n            onDismiss?.();\n          }}\n          aria-label=\"Close Notification\"\n        >\n          <Close size=\"md\" />\n        </button>\n      )}\n    </div>\n  );\n};\n"]}