{"version":3,"file":"Notification.stories.js","sourceRoot":"","sources":["../../../../src/components/Notification/Notification.stories.tsx"],"names":[],"mappings":"AACA,OAAO,EACL,YAAY,EACZ,kBAAkB,EAClB,kBAAkB,EAClB,mBAAmB,GACpB,MAAM,0BAA0B,CAAC;AAElC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,UAAU,EAAE,MAAM,IAAI,CAAC;AAChC,OAAO,EAAE,aAAa,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AAMpE,MAAM,IAAI,GAAoB;IAC5B,KAAK,EAAE,yBAAyB;IAChC,UAAU,EAAE;QACV,MAAM,EAAE;YACN,IAAI,EAAE,CAAC,eAAe,CAAC;SACxB;QACD,IAAI,EAAE;YACJ,WAAW,EAAE;gBACX,SAAS,EACP,4cAA4c;aAC/c;SACF;KACF;IACD,QAAQ,EAAE;QACR,YAAY,EAAE;YACZ,WAAW,EACT,2NAA2N;YAC7N,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;YACrC,OAAO,EAAE;gBACP,IAAI,EAAE,QAAQ;aACf;YACD,KAAK,EAAE;gBACL,YAAY,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE;aACtC;SACF;QACD,KAAK,EAAE;YACL,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;YACnC,OAAO,EAAE;gBACP,IAAI,EAAE,QAAQ;aACf;SACF;QACD,cAAc,EAAE;YACd,OAAO,EAAE;gBACP,IAAI,EAAE,SAAS;aAChB;SACF;QACD,QAAQ,EAAE;YACR,OAAO,EAAE;gBACP,IAAI,EAAE,MAAM;aACb;SACF;QACD,IAAI,EAAE;YACJ,WAAW,EACT,kGAAkG;YACpG,OAAO,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC;YACpC,OAAO,EAAE;gBACP,IAAI,EAAE,QAAQ;aACf;YACD,KAAK,EAAE;gBACL,YAAY,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE;aACpC;SACF;KACF;CACF,CAAC;AAEF,eAAe,IAAI,CAAC;AAGpB,MAAM,CAAC,MAAM,OAAO,GAAU;IAC5B,IAAI,EAAE,cAAc;IACpB,IAAI,EAAE;QACJ,OAAO,EAAE,sBAAsB;QAC/B,cAAc,EAAE,IAAI;QACpB,KAAK,EAAE,SAAS;QAChB,QAAQ,EACN,sEAAsE;QACxE,YAAY,EAAE,UAAU;KACzB;IACD,MAAM,EAAE,CAAC,EAAE,OAAO,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,EAAE;QACrE,OAAO,CACL,oBAAC,YAAY,IACX,KAAK,EAAE,KAAK,EACZ,cAAc,EAAE,cAAc,EAC9B,OAAO,EAAE,GAAG,EAAE;gBACZ,KAAK,CAAC,sBAAsB,CAAC,CAAC;YAChC,CAAC,EACD,YAAY,EAAE,YAAY,EAC1B,IAAI,EAAC,MAAM;YAEX,oBAAC,mBAAmB,QAAE,OAAO,CAAuB;YACnD,QAAQ;YACT,oBAAC,kBAAkB;gBACjB,oBAAC,kBAAkB,IAAC,KAAK,EAAC,UAAU;;oBAElC,oBAAC,UAAU,CAAC,KAAK,OAAG,CACD;gBACrB,oBAAC,kBAAkB,IAAC,KAAK,EAAC,UAAU;;oBAElC,oBAAC,UAAU,CAAC,KAAK,OAAG,CACD,CACF,CACR,CAChB,CAAC;IACJ,CAAC;CACF,CAAC","sourcesContent":["import type { INotificationProps } from '@components/Notification';\nimport {\n  Notification,\n  NotificationButton,\n  NotificationFooter,\n  NotificationHeading,\n} from '@components/Notification';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport React from 'react';\nimport { SystemIcon } from '..';\nimport { colorVariants, displayVariants } from './Notification.css';\n\ntype StoryType = {\n  heading: string;\n} & INotificationProps;\n\nconst meta: Meta<StoryType> = {\n  title: 'Components/Notification',\n  parameters: {\n    status: {\n      type: ['inDevelopment'],\n    },\n    docs: {\n      description: {\n        component:\n          'The Notification component renders a notification with an icon, heading, body, and action buttons. This component is used to announce dynamic changes in the content of a live region by asserting a discreet alert or notification. The appropriate role should be used to ensure that assistive technologies announce these dynamic changes. In the case where a user wants to use the Notification component purely for visual purposes, the role can be set to `none`.',\n      },\n    },\n  },\n  argTypes: {\n    styleVariant: {\n      description:\n        'The Notification component has bordered and borderless variants. The borderless variant is used for notifications that located within a card or content body, while the bordered variant can be used in all other cases. ',\n      options: Object.keys(displayVariants),\n      control: {\n        type: 'select',\n      },\n      table: {\n        defaultValue: { summary: 'bordered' },\n      },\n    },\n    color: {\n      options: Object.keys(colorVariants),\n      control: {\n        type: 'select',\n      },\n    },\n    hasCloseButton: {\n      control: {\n        type: 'boolean',\n      },\n    },\n    children: {\n      control: {\n        type: 'text',\n      },\n    },\n    role: {\n      description:\n        \"The Notification component has a role attribute that can be set to 'alert', 'status', or 'none'.\",\n      options: ['alert', 'status', 'none'],\n      control: {\n        type: 'select',\n      },\n      table: {\n        defaultValue: { summary: 'status' },\n      },\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<StoryType>;\n\nexport const Primary: Story = {\n  name: 'Notification',\n  args: {\n    heading: 'Notification Heading',\n    hasCloseButton: true,\n    color: undefined,\n    children:\n      'Notification children to inform users about the event that occurred!',\n    styleVariant: 'bordered',\n  },\n  render: ({ heading, hasCloseButton, color, children, styleVariant }) => {\n    return (\n      <Notification\n        color={color}\n        hasCloseButton={hasCloseButton}\n        onClose={() => {\n          alert('Close button clicked');\n        }}\n        styleVariant={styleVariant}\n        role=\"none\"\n      >\n        <NotificationHeading>{heading}</NotificationHeading>\n        {children}\n        <NotificationFooter>\n          <NotificationButton color=\"positive\">\n            Accept\n            <SystemIcon.Check />\n          </NotificationButton>\n          <NotificationButton color=\"negative\">\n            Reject\n            <SystemIcon.Close />\n          </NotificationButton>\n        </NotificationFooter>\n      </Notification>\n    );\n  },\n};\n"]}