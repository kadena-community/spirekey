{"version":3,"file":"NavAccordionGroup.js","sourceRoot":"","sources":["../../../../src/components/NavAccordion/NavAccordionGroup.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,OAAO,EAAE,oBAAoB,EAAE,MAAM,qCAAqC,CAAC;AAC3E,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAC9C,OAAO,UAAU,MAAM,YAAY,CAAC;AAEpC,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAClD,OAAO,EACL,4BAA4B,EAC5B,0BAA0B,EAC1B,0BAA0B,EAC1B,8BAA8B,EAC9B,2BAA2B,EAC3B,qBAAqB,GACtB,MAAM,oBAAoB,CAAC;AAU5B,MAAM,CAAC,MAAM,iBAAiB,GAAgC,CAAC,EAC7D,QAAQ,EACR,OAAO,EACP,MAAM,EACN,KAAK,GACN,EAAE,EAAE;IACH,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC5C,MAAM,WAAW,GAAG,GAAS,EAAE;QAC7B,IAAI,MAAM,EAAE;YACV,OAAO,aAAP,OAAO,uBAAP,OAAO,EAAI,CAAC;SACb;aAAM;YACL,MAAM,aAAN,MAAM,uBAAN,MAAM,EAAI,CAAC;SACZ;QACD,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC;IACrB,CAAC,CAAC;IAEF,OAAO,CACL;QACE,gCACE,SAAS,EAAE,UAAU,CAAC;gBACpB,oBAAoB;gBACpB,4BAA4B;aAC7B,CAAC,EACF,OAAO,EAAE,WAAW;YAEpB,oBAAC,UAAU,CAAC,WAAW,IACrB,SAAS,EAAE,UAAU,CAAC,0BAA0B,EAAE;oBAChD,MAAM;iBACP,CAAC,EACF,IAAI,EAAC,IAAI,GACT;YACF,8BAAM,SAAS,EAAE,2BAA2B,IAAG,KAAK,CAAQ,CACrD;QAER,QAAQ,IAAI,MAAM,IAAI,CACrB,4BACE,SAAS,EAAE,UAAU,CAAC;gBACpB,qBAAqB;gBACrB,0BAA0B;aAC3B,CAAC,IAED,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,CACjC,4BAAI,SAAS,EAAE,8BAA8B,IAAG,KAAK,CAAM,CAC5D,CAAC,CACC,CACN,CACG,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["'use client';\nimport { accordionButtonClass } from '@components/Accordion/Accordion.css';\nimport { SystemIcon } from '@components/Icon';\nimport classNames from 'classnames';\nimport type { FC, FunctionComponentElement } from 'react';\nimport React, { Children, useState } from 'react';\nimport {\n  navAccordionGroupButtonClass,\n  navAccordionGroupIconClass,\n  navAccordionGroupListClass,\n  navAccordionGroupListItemClass,\n  navAccordionGroupTitleClass,\n  navAccordionListClass,\n} from './NavAccordion.css';\nimport type { INavAccordionLinkProps } from './NavAccordionLink';\n\nexport interface INavAccordionGroupProps {\n  children: FunctionComponentElement<INavAccordionLinkProps>[];\n  onClose?: () => void;\n  onOpen?: () => void;\n  title: string;\n}\n\nexport const NavAccordionGroup: FC<INavAccordionGroupProps> = ({\n  children,\n  onClose,\n  onOpen,\n  title,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const handleClick = (): void => {\n    if (isOpen) {\n      onClose?.();\n    } else {\n      onOpen?.();\n    }\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div>\n      <button\n        className={classNames([\n          accordionButtonClass,\n          navAccordionGroupButtonClass,\n        ])}\n        onClick={handleClick}\n      >\n        <SystemIcon.ChevronDown\n          className={classNames(navAccordionGroupIconClass, {\n            isOpen,\n          })}\n          size=\"sm\"\n        />\n        <span className={navAccordionGroupTitleClass}>{title}</span>\n      </button>\n\n      {children && isOpen && (\n        <ul\n          className={classNames([\n            navAccordionListClass,\n            navAccordionGroupListClass,\n          ])}\n        >\n          {Children.map(children, (child) => (\n            <li className={navAccordionGroupListItemClass}>{child}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n"]}