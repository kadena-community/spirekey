{"version":3,"file":"AccordionSection.js","sourceRoot":"","sources":["../../../../src/components/Accordion/AccordionSection.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAC9C,OAAO,UAAU,MAAM,YAAY,CAAC;AAEpC,OAAO,KAAK,EAAE,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAC1C,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACvD,OAAO,EACL,oBAAoB,EACpB,qBAAqB,EACrB,0BAA0B,EAC1B,qBAAqB,EACrB,wBAAwB,GACzB,MAAM,iBAAiB,CAAC;AASzB,MAAM,CAAC,MAAM,gBAAgB,GAA+B,CAAC,EAC3D,QAAQ,EACR,OAAO,EACP,MAAM,EACN,KAAK,GACN,EAAE,EAAE;IACH,MAAM,EAAE,YAAY,EAAE,eAAe,EAAE,MAAM,EAAE,GAC7C,UAAU,CAAC,gBAAgB,CAAC,CAAC;IAC/B,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;IAC3D,MAAM,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAEhD,MAAM,WAAW,GAAG,GAAS,EAAE;QAC7B,IAAI,MAAM,EAAE;YACV,eAAe,CACb,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAC/D,CAAC;YACF,OAAO,aAAP,OAAO,uBAAP,OAAO,EAAI,CAAC;SACb;aAAM;YACL,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,YAAY,EAAE,SAAS,CAAC,CAAC,CAAC;YACrE,MAAM,aAAN,MAAM,uBAAN,MAAM,EAAI,CAAC;SACZ;IACH,CAAC,CAAC;IACF,OAAO,CACL,iCACE,SAAS,EAAE,qBAAqB,iBACpB,uBAAuB;QAEnC,gCACE,SAAS,EAAE,UAAU,CAAC,CAAC,oBAAoB,CAAC,CAAC,EAC7C,OAAO,EAAE,WAAW;YAEpB,4BAAI,SAAS,EAAE,0BAA0B,IAAG,KAAK,CAAM;YACvD,oBAAC,UAAU,CAAC,KAAK,IACf,SAAS,EAAE,UAAU,CAAC,wBAAwB,EAAE;oBAC9C,MAAM;iBACP,CAAC,EACF,IAAI,EAAC,IAAI,GACT,CACK;QACR,QAAQ,IAAI,MAAM,IAAI,CACrB,6BAAK,SAAS,EAAE,qBAAqB,IAAG,QAAQ,CAAO,CACxD,CACO,CACX,CAAC;AACJ,CAAC,CAAC","sourcesContent":["'use client';\nimport { SystemIcon } from '@components/Icon';\nimport classNames from 'classnames';\nimport type { FC } from 'react';\nimport React, { useContext } from 'react';\nimport { AccordionContext } from './Accordion.context';\nimport {\n  accordionButtonClass,\n  accordionContentClass,\n  accordionHeadingTitleClass,\n  accordionSectionClass,\n  accordionToggleIconClass,\n} from './Accordion.css';\n\nexport interface IAccordionSectionProps {\n  children?: React.ReactNode;\n  onClose?: () => void;\n  onOpen?: () => void;\n  title: string;\n}\n\nexport const AccordionSection: FC<IAccordionSectionProps> = ({\n  children,\n  onClose,\n  onOpen,\n  title,\n}) => {\n  const { openSections, setOpenSections, linked } =\n    useContext(AccordionContext);\n  const sectionId = title.replace(/\\s+/g, '-').toLowerCase();\n  const isOpen = openSections.includes(sectionId);\n\n  const handleClick = (): void => {\n    if (isOpen) {\n      setOpenSections(\n        linked ? [] : [...openSections.filter((i) => i !== sectionId)],\n      );\n      onClose?.();\n    } else {\n      setOpenSections(linked ? [sectionId] : [...openSections, sectionId]);\n      onOpen?.();\n    }\n  };\n  return (\n    <section\n      className={accordionSectionClass}\n      data-testid=\"kda-accordion-section\"\n    >\n      <button\n        className={classNames([accordionButtonClass])}\n        onClick={handleClick}\n      >\n        <h3 className={accordionHeadingTitleClass}>{title}</h3>\n        <SystemIcon.Close\n          className={classNames(accordionToggleIconClass, {\n            isOpen,\n          })}\n          size=\"sm\"\n        />\n      </button>\n      {children && isOpen && (\n        <div className={accordionContentClass}>{children}</div>\n      )}\n    </section>\n  );\n};\n"]}