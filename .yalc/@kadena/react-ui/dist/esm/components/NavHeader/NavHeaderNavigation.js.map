{"version":3,"file":"NavHeaderNavigation.js","sourceRoot":"","sources":["../../../../src/components/NavHeader/NavHeaderNavigation.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACnD,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAE3E,OAAO,EAAE,0BAA0B,EAAE,MAAM,+BAA+B,CAAC;AAC3E,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AACrC,OAAO,OAAO,MAAM,WAAW,CAAC;AAOhC,MAAM,CAAC,MAAM,mBAAmB,GAAkC,CAAC,EACjE,QAAQ,EACR,UAAU,GACX,EAAE,EAAE;IACH,MAAM,CAAC,WAAW,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAqB,UAAU,CAAC,CAAC;IAC9E,MAAM,EAAE,KAAK,EAAE,iBAAiB,EAAE,OAAO,EAAE,MAAM,EAAE,eAAe,EAAE,GAClE,OAAO,EAAE,CAAC;IAEZ,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,UAAU,KAAK,WAAW;YAAE,aAAa,CAAC,UAAU,CAAC,CAAC;IAC5D,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IAEjB,OAAO,CACL,oBAAC,0BAA0B,CAAC,QAAQ,IAClC,KAAK,EAAE,EAAE,eAAe,EAAE,UAAU,EAAE,WAAW,EAAE,aAAa,EAAE;QAElE,6BAAK,SAAS,EAAE,eAAe,EAAE,GAAG,EAAE,MAAM,gBAAa,MAAM,EAAC,GAAG,EAAC,KAAK;YACvE,6BACE,IAAI,EAAC,MAAM,EACX,SAAS,EAAE,SAAS,EACpB,GAAG,EAAE,OAAO,EACZ,KAAK,EAAE;oBACL,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACtB,SAAS,EAAE,cAAc,KAAK,KAAK;oBACnC,kBAAkB,EAAE,GAAG,iBAAiB,IAAI;iBAC7C;gBAED,oBAAC,OAAO,OAAG,CACP;YACN,4BAAI,SAAS,EAAE,YAAY,IAAG,QAAQ,CAAM,CACxC,CAC8B,CACvC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["'use client';\nimport type { FC, FunctionComponentElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { glowClass, navListClass, navWrapperClass } from './NavHeader.css';\nimport type { INavHeaderLinkProps } from './NavHeaderLink';\nimport { NavHeaderNavigationContext } from './NavHeaderNavigation.context';\nimport { NavGlow } from './svg/glow';\nimport useGlow from './useGlow';\n\nexport interface INavHeaderNavigationProps {\n  children: FunctionComponentElement<INavHeaderLinkProps>[];\n  activeHref?: string;\n}\n\nexport const NavHeaderNavigation: FC<INavHeaderNavigationProps> = ({\n  children,\n  activeHref,\n}) => {\n  const [_activeHref, setActiveHref] = useState<string | undefined>(activeHref);\n  const { glowX, animationDuration, glowRef, navRef, setGlowPosition } =\n    useGlow();\n\n  useEffect(() => {\n    if (activeHref !== _activeHref) setActiveHref(activeHref);\n  }, [activeHref]);\n\n  return (\n    <NavHeaderNavigationContext.Provider\n      value={{ setGlowPosition, activeHref: _activeHref, setActiveHref }}\n    >\n      <nav className={navWrapperClass} ref={navRef} aria-label=\"main\" dir=\"ltr\">\n        <div\n          role=\"none\"\n          className={glowClass}\n          ref={glowRef}\n          style={{\n            opacity: glowX ? 1 : 0,\n            transform: `translateX(${glowX}px)`,\n            transitionDuration: `${animationDuration}ms`,\n          }}\n        >\n          <NavGlow />\n        </div>\n        <ul className={navListClass}>{children}</ul>\n      </nav>\n    </NavHeaderNavigationContext.Provider>\n  );\n};\n"]}