{"version":3,"file":"NavHeader.stories.js","sourceRoot":"","sources":["../../../../src/components/NavHeader/NavHeader.stories.tsx"],"names":[],"mappings":"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","sourcesContent":["import { logoVariants } from '@components/BrandLogo';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport React, { useState } from 'react';\nimport { NavHeader } from './';\nimport type { INavHeaderRootProps } from './NavHeader';\nimport type { INavHeaderLinkProps } from './NavHeaderLink';\n\nconst sampleNavItems: INavHeaderLinkProps[] = [\n  {\n    children: 'Faucet',\n    href: '#faucet',\n  },\n  {\n    children: 'Transactions',\n    href: '#transactions',\n  },\n  {\n    children: 'Balance',\n    href: '#balance',\n  },\n  {\n    children: 'Learn Pact',\n    href: '#pact',\n  },\n];\n\nconst sampleNetworkItems: string[] = ['Mainnet', 'Testnet'];\n\ntype StoryProps = {\n  linksCount: number;\n  navHeaderActiveLink?: string;\n} & INavHeaderRootProps;\n\nconst meta: Meta<StoryProps> = {\n  title: 'Navigation/NavHeader',\n  parameters: {\n    controls: {\n      hideNoControlsWarning: true,\n      sort: 'requiredFirst',\n    },\n    docs: {\n      description: {\n        component:\n          'The NavHeader component provides styled top bar navigation that be configured with main nav links on the left side and any additional custom items on the right side.<br><br><i>Note: In times when you need to use a different `Link` component (like next/link in Next.js), you can wrap it in the `NavHeader.Link` component and set the `asChild` prop to pass on styles and additional props.</i><br><br><i>In progress: maximum navigation items is currently limited (not technically enforced).<br>Pending design update to support more items.</i>',\n      },\n    },\n  },\n  argTypes: {\n    brand: {\n      control: {\n        type: 'select',\n      },\n      description: 'Logo variant',\n      options: ['-', ...logoVariants],\n      table: {\n        defaultValue: { summary: logoVariants[0] },\n      },\n    },\n    linksCount: {\n      control: { type: 'range', min: 1, max: sampleNavItems.length, step: 1 },\n      description: 'Adjust sample navigation items count',\n    },\n    navHeaderActiveLink: {\n      control: { type: 'select' },\n      description: 'Allows users to control the active href',\n      options: Object.values(sampleNavItems).map((item) => item.children),\n      table: {\n        defaultValue: { summary: undefined },\n      },\n    },\n  },\n};\n\ntype IStory = StoryObj<StoryProps>;\n\nexport const Dynamic: IStory = {\n  name: 'NavHeader',\n  args: {\n    brand: logoVariants[0],\n    linksCount: 3,\n    navHeaderActiveLink: undefined,\n  },\n  render: ({ brand, linksCount, navHeaderActiveLink }) => {\n    const activeHref = navHeaderActiveLink\n      ? Object.values(sampleNavItems).find(\n          (item) => item.children === navHeaderActiveLink,\n        )?.href\n      : undefined;\n    const [value, setValue] = useState<string>(sampleNetworkItems[0]);\n\n    return (\n      <NavHeader.Root brand={brand}>\n        <NavHeader.Navigation activeHref={activeHref}>\n          {sampleNavItems.slice(0, linksCount).map((item, index) => (\n            <NavHeader.Link\n              key={index}\n              href={item.href}\n              onClick={(event) => console.log(item.children, { event })}\n            >\n              {item.children}\n            </NavHeader.Link>\n          ))}\n        </NavHeader.Navigation>\n        <NavHeader.Content>\n          <NavHeader.Select\n            id=\"network-select\"\n            ariaLabel=\"Select Network\"\n            value={value}\n            onChange={(e) => {\n              console.log('clicked on', e.target.value);\n              setValue(e.target.value);\n            }}\n            icon=\"Earth\"\n          >\n            {sampleNetworkItems.map((network) => (\n              <option key={network} value={network}>\n                {network}\n              </option>\n            ))}\n          </NavHeader.Select>\n        </NavHeader.Content>\n      </NavHeader.Root>\n    );\n  },\n};\n\nexport default meta;\n"]}