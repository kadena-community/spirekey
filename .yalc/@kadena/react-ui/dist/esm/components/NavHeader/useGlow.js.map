{"version":3,"file":"useGlow.js","sourceRoot":"","sources":["../../../../src/components/NavHeader/useGlow.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAUzC,MAAM,OAAO,GAAG,GAAmB,EAAE;IACnC,MAAM,OAAO,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;IAC7C,MAAM,MAAM,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;IAE5C,MAAM,mBAAmB,GAAG,CAAC,EAAE,CAAC;IAEhC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,mBAAmB,CAAC,CAAC;IAExD,MAAM,SAAS,GAAG,MAAM,CAAS,KAAK,CAAC,CAAC;IAExC,MAAM,eAAe,GAAG,CAAC,YAAqB,EAAQ,EAAE;;QACtD,SAAS,CAAC,OAAO,GAAG,KAAK,CAAC;QAE1B,MAAM,UAAU,GAAG,MAAA,OAAO,CAAC,OAAO,0CAAE,qBAAqB,EAAE,CAAC;QAC5D,MAAM,YAAY,GAAG,MAAA,MAAA,MAAM,CAAC,OAAO,0CAAE,aAAa,0CAAE,qBAAqB,EAAE,CAAC;QAE5E,IAAI,UAAU,IAAI,YAAY,EAAE;YAC9B,MAAM,KAAK,GAAG,YAAY,CAAC,CAAC,GAAG,mBAAmB,GAAG,IAAI,CAAC;YAC1D,QAAQ,CAAC,KAAK,CAAC,CAAC;SACjB;IACH,CAAC,CAAC;IAEF,OAAO;QACL,iBAAiB,EACf,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC;QAC3D,OAAO;QACP,KAAK;QACL,eAAe;QACf,MAAM;KACP,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,OAAO,CAAC","sourcesContent":["'use client';\nimport { useRef, useState } from 'react';\n\ninterface IUseGlowReturn {\n  animationDuration: number;\n  glowRef: React.RefObject<HTMLDivElement>;\n  navRef: React.RefObject<HTMLDivElement>;\n  glowX: number;\n  setGlowPosition: (targetBounds: DOMRect) => void;\n}\n\nconst useGlow = (): IUseGlowReturn => {\n  const glowRef = useRef<HTMLDivElement>(null);\n  const navRef = useRef<HTMLDivElement>(null);\n\n  const initialGlowPosition = -40;\n\n  const [glowX, setGlowX] = useState(initialGlowPosition);\n\n  const prevGlowX = useRef<number>(glowX);\n\n  const setGlowPosition = (targetBounds: DOMRect): void => {\n    prevGlowX.current = glowX;\n\n    const glowBounds = glowRef.current?.getBoundingClientRect();\n    const headerBounds = navRef.current?.parentElement?.getBoundingClientRect();\n\n    if (glowBounds && headerBounds) {\n      const glowX = targetBounds.x + initialGlowPosition * 2.25;\n      setGlowX(glowX);\n    }\n  };\n\n  return {\n    animationDuration:\n      glowX === 0 ? 0 : Math.abs(glowX - prevGlowX.current) * 2,\n    glowRef,\n    glowX,\n    setGlowPosition,\n    navRef,\n  };\n};\n\nexport default useGlow;\n"]}