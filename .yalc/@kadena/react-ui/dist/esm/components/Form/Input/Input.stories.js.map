{"version":3,"file":"Input.stories.js","sourceRoot":"","sources":["../../../../../src/components/Form/Input/Input.stories.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Button } from '@components/Button';\nimport type { IInputProps } from '@components/Form';\nimport { Input } from '@components/Form';\nimport { SystemIcon } from '@components/Icon';\nimport { Stack } from '@components/Layout/Stack';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { vars } from '@theme/vars.css';\nimport type { HTMLInputTypeAttribute } from 'react';\nimport React from 'react';\n\nconst HTMLInputTypes: HTMLInputTypeAttribute[] = [\n  'button',\n  'checkbox',\n  'color',\n  'date',\n  'datetime-local',\n  'email',\n  'file',\n  'hidden',\n  'image',\n  'month',\n  'number',\n  'password',\n  'radio',\n  'range',\n  'reset',\n  'search',\n  'submit',\n  'tel',\n  'text',\n  'time',\n  'url',\n  'week',\n];\n\nconst meta: Meta<IInputProps> = {\n  title: 'Form/Input/Input',\n  component: Input,\n  parameters: {\n    status: { type: 'inDevelopment' },\n    docs: {\n      description: {\n        component:\n          'The Input component is a wrapper around the native input element that provides the ability to add additional information. This handles any kind of children that will be rendered inside the input on the right side of it.',\n      },\n    },\n  },\n  argTypes: {\n    type: {\n      control: { type: 'select' },\n      options: HTMLInputTypes,\n    },\n    disabled: {\n      description: 'Disables the input and applies visual styling.',\n      control: {\n        type: 'boolean',\n      },\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: 'false' },\n      },\n    },\n    icon: {\n      description:\n        'Icon rendered inside the input to the left of the input text.',\n      options: [\n        '-',\n        ...(Object.keys(SystemIcon) as (keyof typeof SystemIcon)[]),\n      ],\n      control: {\n        type: 'select',\n      },\n    },\n    leadingText: {\n      description: 'Leading text that is rendered to the left of the input.',\n      control: {\n        type: 'text',\n      },\n    },\n    leadingTextWidth: {\n      description:\n        'Width of the leading text. Defaults to the size of the text itself.',\n      control: {\n        type: 'select',\n      },\n      options: [\n        '- Omit this property to auto-size the leading text',\n        ...Object.keys(vars.sizes).map((key) => key as keyof typeof vars.sizes),\n      ],\n    },\n    outlined: {\n      description: 'Option to render the input with an outline.',\n      control: {\n        type: 'boolean',\n      },\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: 'false' },\n      },\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<\n  {\n    leadingText: string;\n    icon: keyof typeof SystemIcon;\n    type: React.HTMLInputTypeAttribute;\n  } & Omit<IInputProps, 'icon'>\n>;\n\nexport const Dynamic: Story = {\n  name: 'Input',\n  args: {\n    icon: undefined,\n    type: 'text',\n    leadingTextWidth: undefined,\n    leadingText: '',\n    outlined: false,\n  },\n  render: ({\n    icon,\n    outlined,\n    leadingText,\n    leadingTextWidth,\n    onChange,\n    disabled,\n    type,\n  }) => (\n    <Input\n      id=\"inlineInputStory\"\n      icon={icon}\n      onChange={onChange}\n      placeholder=\"This is a placeholder\"\n      leadingTextWidth={leadingTextWidth}\n      leadingText={leadingText}\n      outlined={outlined}\n      disabled={disabled}\n      type={type}\n    />\n  ),\n};\n\nexport const InlineWithButton: Story = {\n  name: 'Inline with button',\n  args: {\n    icon: undefined,\n    type: 'text',\n  },\n  render: ({ icon, onChange, type }) => (\n    <Stack gap=\"$xs\" alignItems=\"stretch\">\n      <Input\n        id=\"inlineInputStory\"\n        icon={icon}\n        onChange={onChange}\n        placeholder=\"This is a placeholder\"\n        outlined\n        type={type}\n      />\n      <Button title=\"Submit\" onClick={() => {}}>\n        Submit\n      </Button>\n    </Stack>\n  ),\n};\n"]}