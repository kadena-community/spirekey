{"version":3,"file":"TextareaField.stories.js","sourceRoot":"","sources":["../../../../../src/components/Form/TextareaField/TextareaField.stories.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AACjD,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AAE9D,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAExC,MAAM,IAAI,GAA8B;IACtC,KAAK,EAAE,oBAAoB;IAC3B,SAAS,EAAE,aAAa;IACxB,UAAU,EAAE,CAAC,gBAAgB,EAAE,QAAQ,CAAC;IACxC,UAAU,EAAE;QACV,MAAM,EAAE,EAAE,IAAI,EAAE,eAAe,EAAE;QACjC,IAAI,EAAE;YACJ,WAAW,EAAE;gBACX,SAAS,EACP,sIAAsI;aACzI;SACF;KACF;IACD,QAAQ,EAAE;QACR,QAAQ,EAAE;YACR,WAAW,EAAE,gDAAgD;YAC7D,OAAO,EAAE;gBACP,IAAI,EAAE,SAAS;aAChB;YACD,KAAK,EAAE;gBACL,IAAI,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE;gBAC5B,YAAY,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE;aACnC;SACF;KACF;CACF,CAAC;AAEF,eAAe,IAAI,CAAC;AAIpB,MAAM,CAAC,MAAM,cAAc,GAAU;IACnC,IAAI,EAAE,kBAAkB;IACxB,IAAI,EAAE;QACJ,QAAQ,EAAE,KAAK;QACf,GAAG,EAAE,KAAK;QACV,UAAU,EAAE,qBAAqB;QACjC,IAAI,EAAE,YAAY;QAClB,KAAK,EAAE,OAAO;QACd,EAAE,EAAE,gBAAgB;QACpB,UAAU,EAAE,UAAU;QACtB,WAAW,EAAE,uBAAuB;QACpC,KAAK,EAAE,EAAE;QACT,QAAQ,EAAE,GAAG,EAAE,GAAE,CAAC;KACnB;IACD,MAAM,EAAE,CAAC,EAAE,QAAQ,EAAE,GAAG,IAAI,EAAE,EAAE,EAAE;QAChC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAS,EAAE,CAAC,CAAC;QAE/C,OAAO,CACL,oBAAC,aAAa,IACZ,QAAQ,EAAE,QAAQ,KACd,IAAI,EACR,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,GAChD,CACH,CAAC;IACJ,CAAC;CACF,CAAC","sourcesContent":["import type { ITextareaFieldProps } from '@components/Form';\nimport { TextareaField } from '@components/Form';\nimport { onLayer2, withContentWidth } from '@storyDecorators';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport React, { useState } from 'react';\n\nconst meta: Meta<ITextareaFieldProps> = {\n  title: 'Form/TextareaField',\n  component: TextareaField,\n  decorators: [withContentWidth, onLayer2],\n  parameters: {\n    status: { type: 'inDevelopment' },\n    docs: {\n      description: {\n        component:\n          'The TextareaField component is a wrapper around the native textarea element that provides the ability to add additional information.',\n      },\n    },\n  },\n  argTypes: {\n    disabled: {\n      description: 'Disables the input and applies visual styling.',\n      control: {\n        type: 'boolean',\n      },\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: 'false' },\n      },\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ITextareaFieldProps>;\n\nexport const TextFieldStory: Story = {\n  name: 'TextField config',\n  args: {\n    disabled: false,\n    tag: 'tag',\n    helperText: 'This is helper text',\n    info: '(optional)',\n    label: 'Label',\n    id: 'TextFieldStory',\n    fontFamily: 'codeFont',\n    placeholder: 'This is a placeholder',\n    value: '',\n    onChange: () => {},\n  },\n  render: ({ disabled, ...rest }) => {\n    const [value, setValue] = useState<string>('');\n\n    return (\n      <TextareaField\n        disabled={disabled}\n        {...rest}\n        value={value}\n        onChange={({ target }) => setValue(target.value)}\n      />\n    );\n  },\n};\n"]}