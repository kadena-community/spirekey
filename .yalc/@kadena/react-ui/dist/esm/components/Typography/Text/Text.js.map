{"version":3,"file":"Text.js","sourceRoot":"","sources":["../../../../../src/components/Typography/Text/Text.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,YAAY,CAAC;AAE5B,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EACL,YAAY,EACZ,eAAe,EACf,aAAa,EACb,gBAAgB,EAChB,gBAAgB,EAChB,mBAAmB,EACnB,YAAY,EACZ,eAAe,EACf,aAAa,EACb,gBAAgB,EAChB,gBAAgB,EAChB,mBAAmB,GACpB,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,aAAa,EAAE,iBAAiB,EAAE,MAAM,mBAAmB,CAAC;AAGrE,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,GAAG,EAAE,MAAM,EAAE,MAAM,CAAU,CAAC;AAI5D,SAAS,YAAY,CACnB,OAAoB,EACpB,MAAe,EACf,IAAqB;IAErB,IAAI,IAAI,KAAK,MAAM,IAAI,OAAO,KAAK,UAAU,EAAE;QAC7C,OAAO,MAAM,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,mBAAmB,CAAC;KACxD;IACD,IAAI,IAAI,KAAK,MAAM,IAAI,OAAO,KAAK,OAAO,EAAE;QAC1C,OAAO,MAAM,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,gBAAgB,CAAC;KAClD;IAED,IAAI,IAAI,KAAK,MAAM,IAAI,OAAO,KAAK,MAAM,EAAE;QACzC,OAAO,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,eAAe,CAAC;KAChD;IAED,IAAI,OAAO,KAAK,UAAU,EAAE;QAC1B,OAAO,MAAM,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,mBAAmB,CAAC;KACxD;IACD,IAAI,OAAO,KAAK,OAAO,EAAE;QACvB,OAAO,MAAM,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,gBAAgB,CAAC;KAClD;IAED,OAAO,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,eAAe,CAAC;AACjD,CAAC;AAWD,MAAM,CAAC,MAAM,IAAI,GAAmB,CAAC,EACnC,EAAE,GAAG,MAAM,EACX,OAAO,GAAG,MAAM,EAChB,IAAI,GAAG,KAAK,EACZ,KAAK,GAAG,SAAS,EACjB,SAAS,GAAG,MAAM,EAClB,QAAQ,EACR,SAAS,EACT,GAAG,KAAK,EACT,EAAE,EAAE;IACH,MAAM,SAAS,GAAG,EAAE,CAClB,YAAY,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC,EAC/B,aAAa,CAAC,KAAK,CAAC,EACpB,iBAAiB,CAAC,SAAS,CAAC,EAC5B,SAAS,CACV,CAAC;IAGF,MAAM,OAAO,GAAG,aAAa,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;IACzD,OAAO,CACL,oBAAC,OAAO,IAAC,SAAS,EAAE,SAAS,KAAM,KAAK,IACrC,QAAQ,CACD,CACX,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import cn from 'classnames';\nimport type { ComponentPropsWithRef, FC } from 'react';\nimport React from 'react';\nimport {\n  bodyBaseBold,\n  bodyBaseRegular,\n  bodySmallBold,\n  bodySmallRegular,\n  bodySmallestBold,\n  bodySmallestRegular,\n  codeBaseBold,\n  codeBaseRegular,\n  codeSmallBold,\n  codeSmallRegular,\n  codeSmallestBold,\n  codeSmallestRegular,\n} from '../../../styles';\nimport { colorVariants, transformVariants } from '../typography.css';\n\n// eslint-disable-next-line @kadena-dev/typedef-var\nexport const TEXT_ELEMENTS = ['p', 'span', 'code'] as const;\nexport type TextElementType = (typeof TEXT_ELEMENTS)[number];\n\ntype TextVariant = 'small' | 'smallest' | 'base';\nfunction getFontClass(\n  variant: TextVariant,\n  isBold: boolean,\n  type: TextElementType,\n): string {\n  if (type === 'code' && variant === 'smallest') {\n    return isBold ? codeSmallestBold : codeSmallestRegular;\n  }\n  if (type === 'code' && variant === 'small') {\n    return isBold ? codeSmallBold : codeSmallRegular;\n  }\n\n  if (type === 'code' && variant === 'base') {\n    return isBold ? codeBaseBold : codeBaseRegular;\n  }\n\n  if (variant === 'smallest') {\n    return isBold ? bodySmallestBold : bodySmallestRegular;\n  }\n  if (variant === 'small') {\n    return isBold ? bodySmallBold : bodySmallRegular;\n  }\n\n  return isBold ? bodyBaseBold : bodyBaseRegular;\n}\n\nexport interface ITextProps extends ComponentPropsWithRef<'p'> {\n  as?: TextElementType;\n  variant?: TextVariant;\n  bold?: boolean;\n  color?: keyof typeof colorVariants;\n  transform?: keyof typeof transformVariants;\n  children: React.ReactNode;\n}\n\nexport const Text: FC<ITextProps> = ({\n  as = 'span',\n  variant = 'base',\n  bold = false,\n  color = 'default',\n  transform = 'none',\n  children,\n  className,\n  ...props\n}) => {\n  const classList = cn(\n    getFontClass(variant, bold, as),\n    colorVariants[color],\n    transformVariants[transform],\n    className,\n  );\n\n  // making sure that the variant is one of the allowed ones in case typescript is ignored or not used\n  const Element = TEXT_ELEMENTS.includes(as) ? as : 'span';\n  return (\n    <Element className={classList} {...props}>\n      {children}\n    </Element>\n  );\n};\n"]}