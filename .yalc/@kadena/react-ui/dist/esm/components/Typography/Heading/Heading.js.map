{"version":3,"file":"Heading.js","sourceRoot":"","sources":["../../../../../src/components/Typography/Heading/Heading.tsx"],"names":[],"mappings":"AAAA,OAAO,UAAU,MAAM,YAAY,CAAC;AAEpC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EACL,UAAU,EACV,aAAa,EACb,UAAU,EACV,aAAa,EACb,UAAU,EACV,aAAa,EACb,UAAU,EACV,aAAa,EACb,UAAU,EACV,aAAa,EACb,UAAU,EACV,aAAa,GACd,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,aAAa,EAAE,iBAAiB,EAAE,MAAM,mBAAmB,CAAC;AAGrE,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAU,CAAC;AAY9E,SAAS,eAAe,CAAC,OAA2B,EAAE,MAAe;IACnE,QAAQ,OAAO,EAAE;QACf,KAAK,IAAI;YACP,OAAO,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC;QAC7C,KAAK,IAAI;YACP,OAAO,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC;QAC7C,KAAK,IAAI;YACP,OAAO,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC;QAC7C,KAAK,IAAI;YACP,OAAO,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC;QAC7C,KAAK,IAAI;YACP,OAAO,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC;QAC7C,KAAK,IAAI,CAAC;QACV;YACE,OAAO,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC;KAC9C;AACH,CAAC;AAED,MAAM,CAAC,MAAM,OAAO,GAAsB,CAAC,EACzC,EAAE,GAAG,IAAI,EACT,OAAO,GAAG,EAAE,EACZ,KAAK,GAAG,WAAW,EACnB,SAAS,GAAG,MAAM,EAClB,IAAI,GAAG,IAAI,EACX,QAAQ,EACR,SAAS,EACT,GAAG,KAAK,EACT,EAAE,EAAE;IACH,MAAM,SAAS,GAAG,UAAU,CAC1B,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,EAC9B,aAAa,CAAC,KAAK,CAAC,EACpB,iBAAiB,CAAC,SAAS,CAAC,EAC5B,SAAS,CACV,CAAC;IAEF,MAAM,OAAO,GAAG,gBAAgB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IAC1D,OAAO,CACL,oBAAC,OAAO,IAAC,SAAS,EAAE,SAAS,KAAM,KAAK,IACrC,QAAQ,CACD,CACX,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import classNames from 'classnames';\nimport type { ComponentPropsWithRef, FC } from 'react';\nimport React from 'react';\nimport {\n  fontH1Bold,\n  fontH1Regular,\n  fontH2Bold,\n  fontH2Regular,\n  fontH3Bold,\n  fontH3Regular,\n  fontH4Bold,\n  fontH4Regular,\n  fontH5Bold,\n  fontH5Regular,\n  fontH6Bold,\n  fontH6Regular,\n} from '../../../styles';\nimport { colorVariants, transformVariants } from '../typography.css';\n\n// eslint-disable-next-line @kadena-dev/typedef-var\nexport const HEADING_ELEMENTS = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'] as const;\nexport type HeadingElementType = (typeof HEADING_ELEMENTS)[number];\n\nexport interface IHeadingProps extends ComponentPropsWithRef<'h1'> {\n  as?: HeadingElementType;\n  variant?: HeadingElementType;\n  bold?: boolean;\n  color?: keyof typeof colorVariants;\n  transform?: keyof typeof transformVariants;\n  children: React.ReactNode;\n}\n\nfunction getHeadingClass(variant: HeadingElementType, isBold: boolean): string {\n  switch (variant) {\n    case 'h2':\n      return isBold ? fontH2Bold : fontH2Regular;\n    case 'h3':\n      return isBold ? fontH3Bold : fontH3Regular;\n    case 'h4':\n      return isBold ? fontH4Bold : fontH4Regular;\n    case 'h5':\n      return isBold ? fontH5Bold : fontH5Regular;\n    case 'h6':\n      return isBold ? fontH6Bold : fontH6Regular;\n    case 'h1':\n    default:\n      return isBold ? fontH1Bold : fontH1Regular;\n  }\n}\n\nexport const Heading: FC<IHeadingProps> = ({\n  as = 'h1',\n  variant = as,\n  color = 'emphasize',\n  transform = 'none',\n  bold = true,\n  children,\n  className,\n  ...props\n}) => {\n  const classList = classNames(\n    getHeadingClass(variant, bold),\n    colorVariants[color],\n    transformVariants[transform],\n    className,\n  );\n  // making sure that the variant is one of the allowed ones in case typescript is ignored or not used\n  const Element = HEADING_ELEMENTS.includes(as) ? as : 'h1';\n  return (\n    <Element className={classList} {...props}>\n      {children}\n    </Element>\n  );\n};\n"]}