{"version":3,"file":"ProgressCircle.spec.js","sourceRoot":"","sources":["../../../../src/components/ProgressCircle/ProgressCircle.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { render } from '@testing-library/react';\nimport React from 'react';\nimport { describe, expect, it, vi } from 'vitest';\nimport { ProgressCircle } from './ProgressCircle';\n\ndescribe('ProgressCircle', () => {\n  it('Should handle defaults', () => {\n    const { getByRole } = render(<ProgressCircle aria-label=\"Progress\" />);\n    const progressCircle = getByRole('progressbar');\n    expect(progressCircle).toHaveAttribute('aria-valuemin', '0');\n    expect(progressCircle).toHaveAttribute('aria-valuemax', '100');\n    expect(progressCircle).toHaveAttribute('aria-valuenow', '0');\n  });\n\n  it('Should handle indeterminate', () => {\n    const { getByRole } = render(\n      <ProgressCircle aria-label=\"Progress\" isIndeterminate />,\n    );\n    const progressCircle = getByRole('progressbar');\n    expect(progressCircle).toHaveAttribute('aria-valuemin', '0');\n    expect(progressCircle).toHaveAttribute('aria-valuemax', '100');\n    expect(progressCircle).not.toHaveAttribute('aria-valuenow');\n  });\n\n  it('Should handle controlled value', () => {\n    const { getByRole } = render(\n      <ProgressCircle aria-label=\"Progress\" value={30} />,\n    );\n    const progressCircle = getByRole('progressbar');\n    expect(progressCircle).toHaveAttribute('aria-valuemin', '0');\n    expect(progressCircle).toHaveAttribute('aria-valuemax', '100');\n    expect(progressCircle).toHaveAttribute('aria-valuenow', '30');\n  });\n\n  it('Should clamp values to 0', () => {\n    const { getByRole } = render(\n      <ProgressCircle aria-label=\"Progress\" value={-1} />,\n    );\n    const progressCircle = getByRole('progressbar');\n    expect(progressCircle).toHaveAttribute('aria-valuenow', '0');\n  });\n\n  it('Should clamp values to 100', () => {\n    const { getByRole } = render(\n      <ProgressCircle aria-label=\"Progress\" value={1000} />,\n    );\n    const progressCircle = getByRole('progressbar');\n    expect(progressCircle).toHaveAttribute('aria-valuenow', '100');\n  });\n\n  it('Should support className', () => {\n    const { getByRole } = render(\n      <ProgressCircle aria-label=\"Progress\" className=\"testClass\" />,\n    );\n    const progressCircle = getByRole('progressbar');\n    expect(progressCircle).toHaveAttribute(\n      'class',\n      expect.stringContaining('testClass'),\n    );\n  });\n\n  it('can handle negative values with minValue and maxValue', () => {\n    const { getByRole } = render(\n      <ProgressCircle\n        aria-label=\"Progress\"\n        value={0}\n        minValue={-5}\n        maxValue={5}\n      />,\n    );\n    const progressBar = getByRole('progressbar');\n    expect(progressBar).toHaveAttribute('aria-valuenow', '0');\n    expect(progressBar).toHaveAttribute('aria-valuetext', '50%');\n  });\n\n  it('warns user if no aria-label is provided', () => {\n    const spyWarn = vi.spyOn(console, 'warn').mockImplementation(() => {});\n    render(<ProgressCircle value={25} />);\n    expect(spyWarn).toHaveBeenCalledWith(\n      'If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility',\n    );\n  });\n\n  it('supports custom DOM props', () => {\n    const { getByTestId } = render(\n      <ProgressCircle value={25} aria-label=\"Progress\" data-testid=\"test\" />,\n    );\n    const progressBar = getByTestId('test');\n    expect(progressBar).toBeInTheDocument();\n  });\n});\n"]}