{"version":3,"file":"Dialog.test.js","sourceRoot":"","sources":["../../../../src/components/Dialog/Dialog.test.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,wBAAwB,CAAC;AACxD,OAAO,SAAS,MAAM,6BAA6B,CAAC;AACpD,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,QAAQ,CAAC;AAE9C,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAEzE,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;IACrB,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC7C,MAAM,CACJ,oBAAC,MAAM,IAAC,MAAM;YACZ,oBAAC,aAAa,wBAA8B,CACrC,CACV,CAAC;QAEF,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC1C,MAAM,CACJ,oBAAC,MAAM,IAAC,MAAM;YACZ,oBAAC,YAAY,gBAAqB;YAClC,oBAAC,aAAa,wBAA8B,CACrC,CACV,CAAC;QAEF,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;QAC9D,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,MAAM,CACJ,oBAAC,MAAM,IAAC,MAAM,sBAAY,cAAc;YACtC,oBAAC,YAAY,4BAAiC;YAC9C,oBAAC,aAAa,wBAA8B,CACrC,CACV,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC,eAAe,CAC3D,MAAM,EACN,QAAQ,CACT,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QAC3D,MAAM,CACJ,oBAAC,MAAM,IAAC,WAAW;YACjB,oBAAC,aAAa,wBAA8B,CACrC,CACV,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;IAChE,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;QACxE,MAAM,CACJ,oBAAC,MAAM,IAAC,WAAW;YACjB,oBAAC,aAAa,wBAA8B,CACrC,CACV,CAAC;QAEF,MAAM,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC7C,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC;IACtE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport React from 'react';\nimport { describe, expect, it } from 'vitest';\n\nimport { Dialog, DialogContent, DialogHeader } from '@components/Dialog';\n\ndescribe('Modal', () => {\n  it('should render the provided children', () => {\n    render(\n      <Dialog isOpen>\n        <DialogContent>Hello, world!</DialogContent>\n      </Dialog>,\n    );\n\n    expect(screen.getByText('Hello, world!')).toBeInTheDocument();\n  });\n\n  it('should render the provided title', () => {\n    render(\n      <Dialog isOpen>\n        <DialogHeader>Title</DialogHeader>\n        <DialogContent>Hello, world!</DialogContent>\n      </Dialog>,\n    );\n\n    expect(screen.getByText('Hello, world!')).toBeInTheDocument();\n    expect(screen.getByLabelText('Title')).toHaveAttribute('role', 'dialog');\n  });\n\n  it('should use custom aria-label correctly', () => {\n    render(\n      <Dialog isOpen aria-label=\"my own label\">\n        <DialogHeader>Only Visual Title</DialogHeader>\n        <DialogContent>Hello, world!</DialogContent>\n      </Dialog>,\n    );\n    expect(screen.getByLabelText('my own label')).toHaveAttribute(\n      'role',\n      'dialog',\n    );\n  });\n\n  it('should render the dialog when defaultOpen is true', () => {\n    render(\n      <Dialog defaultOpen>\n        <DialogContent>Hello, world!</DialogContent>\n      </Dialog>,\n    );\n    expect(screen.getByText('Hello, world!')).toBeInTheDocument();\n  });\n  it('should dismiss the dialog when the escape key is pressed', async () => {\n    render(\n      <Dialog defaultOpen>\n        <DialogContent>Hello, world!</DialogContent>\n      </Dialog>,\n    );\n\n    await userEvent.type(document.body, '{esc}');\n    expect(screen.queryByText('Hello, world!')).not.toBeInTheDocument();\n  });\n});\n"]}