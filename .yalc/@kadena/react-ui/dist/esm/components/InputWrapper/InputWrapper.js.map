{"version":3,"file":"InputWrapper.js","sourceRoot":"","sources":["../../../../src/components/InputWrapper/InputWrapper.tsx"],"names":[],"mappings":"AAEA,OAAO,KAAK,MAAM,OAAO,CAAC;AAG1B,OAAO,EAAE,WAAW,EAAE,MAAM,2BAA2B,CAAC;AACxD,OAAO,EAAE,WAAW,EAAE,MAAM,2BAA2B,CAAC;AAExD,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAanD,MAAM,CAAC,MAAM,YAAY,GAA2B,CAAC,EACnD,MAAM,EACN,QAAQ,EACR,QAAQ,EACR,KAAK,EACL,gBAAgB,GAAG,SAAS,EAC5B,OAAO,EACP,GAAG,EACH,IAAI,EACJ,UAAU,GACX,EAAE,EAAE;IACH,MAAM,SAAS,GAAG,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC;IAE1D,OAAO,CACL,6BAAK,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS;QAC7D,KAAK,KAAK,SAAS,IAAI,CACtB,oBAAC,WAAW,IAAC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,GAAI,CACtE;QACD,6BAAK,SAAS,EAAC,YAAY,IACxB,gBAAgB;YACf,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE;gBACrC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAC9C,MAAM,KAAK,GAAG;oBACZ,GAAG,KAAK,CAAC,KAAK;oBACd,gBAAgB;iBACjB,CAAC;gBAEF,OAAO,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC1C,CAAC,CAAC;YACJ,CAAC,CAAC,QAAQ,CACR;QACL,OAAO,CAAC,UAAU,CAAC,IAAI,oBAAC,WAAW,QAAE,UAAU,CAAe,CAC3D,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { IInputProps } from '@components/Input';\nimport type { FC, FunctionComponentElement } from 'react';\nimport React from 'react';\nimport type { vars } from 'src/styles';\nimport type { IInputHeaderProps } from './InputHeader/InputHeader';\nimport { InputHeader } from './InputHeader/InputHeader';\nimport { InputHelper } from './InputHelper/InputHelper';\nimport type { Status } from './InputWrapper.css';\nimport { statusVariant } from './InputWrapper.css';\n\nexport interface IInputWrapperProps extends Omit<IInputHeaderProps, 'label'> {\n  children:\n    | FunctionComponentElement<IInputProps>\n    | FunctionComponentElement<IInputProps>[];\n  status?: Status;\n  disabled?: boolean;\n  helperText?: string;\n  label?: string;\n  leadingTextWidth?: keyof typeof vars.sizes;\n}\n\nexport const InputWrapper: FC<IInputWrapperProps> = ({\n  status,\n  disabled,\n  children,\n  label,\n  leadingTextWidth = undefined,\n  htmlFor,\n  tag,\n  info,\n  helperText,\n}) => {\n  const statusVal = disabled === true ? 'disabled' : status;\n\n  return (\n    <div className={statusVal ? statusVariant[statusVal] : undefined}>\n      {label !== undefined && (\n        <InputHeader htmlFor={htmlFor} label={label} tag={tag} info={info} />\n      )}\n      <div className=\"inputGroup\">\n        {leadingTextWidth\n          ? React.Children.map(children, (child) => {\n              if (!React.isValidElement(child)) return null;\n              const props = {\n                ...child.props,\n                leadingTextWidth,\n              };\n\n              return React.cloneElement(child, props);\n            })\n          : children}\n      </div>\n      {Boolean(helperText) && <InputHelper>{helperText}</InputHelper>}\n    </div>\n  );\n};\n"]}