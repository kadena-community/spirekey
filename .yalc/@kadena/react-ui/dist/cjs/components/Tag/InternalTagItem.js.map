{"version":3,"file":"InternalTagItem.js","sourceRoot":"","sources":["../../../../src/components/Tag/InternalTagItem.tsx"],"names":[],"mappings":";;;;;;AAAA,2CAA8C;AAC9C,6CAA8C;AAE9C,kDAA0B;AAE1B,2CAA6D;AAE7D,+BAA4B;AAC5B,uCAA2D;AAE3D,MAAM,WAAW,GAAoC,CAAC,KAAK,EAAE,EAAE;IAC7D,MAAM,GAAG,GAAG,eAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC/B,MAAM,EAAE,WAAW,EAAE,GAAG,IAAA,sBAAS,EAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAE9C,OAAO,CACL,0CAAQ,SAAS,EAAE,0BAAgB,KAAM,WAAW,EAAE,GAAG,EAAE,GAAG;QAC5D,8BAAC,iBAAU,CAAC,KAAK,IAAC,IAAI,EAAC,IAAI,GAAG,CACvB,CACV,CAAC;AACJ,CAAC,CAAC;AAWK,MAAM,eAAe,GAA8B,CAAC,EACzD,QAAQ,EACR,OAAO,EACP,GAAG,KAAK,EACT,EAAE,EAAE;IACH,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;IACxB,MAAM,GAAG,GAAG,eAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC/B,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,GAAG,IAAA,yBAAY,EAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;IACtE,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,iBAAiB,EAAE,cAAc,EAAE,GAAG,IAAA,mBAAM,EAC3E,KAAK,EACL,KAAK,EACL,GAAG,CACJ,CAAC;IAEF,MAAM,UAAU,GAAG,CAAC,OAAkB,EAAa,EAAE,CAAC,CACpD,8BAAC,SAAG,OAAK,aAAa;QACnB,OAAO;QACP,cAAc,IAAI,8BAAC,WAAW,OAAK,iBAAiB,GAAI,CACrD,CACP,CAAC;IAEF,IAAI,OAAO,IAAI,eAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;QAC7C,OAAO,eAAK,CAAC,YAAY,CAAC,QAAQ,EAAE;YAClC,SAAS,EAAE,sBAAY;YACvB,GAAG,QAAQ,CAAC,KAAK;YACjB,GAAG,QAAQ;YACX,GAAG,UAAU;YACb,oBAAoB,EAAE,cAAc;YACpC,GAAG,EAAE,IAAA,iBAAS,EAAC,GAAG,EAAG,QAAgB,CAAC,GAAG,CAAC;YAC1C,QAAQ,EAAE,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC;SAC9C,CAAC,CAAC;KACJ;IAED,OAAO,CACL,uCACE,SAAS,EAAE,sBAAY,EACvB,GAAG,EAAE,GAAG,KACJ,QAAQ,KACR,UAAU,wBACM,cAAc,IAEjC,UAAU,CAAC,QAAQ,CAAC,CACjB,CACP,CAAC;AACJ,CAAC,CAAC;AA5CW,QAAA,eAAe,mBA4C1B","sourcesContent":["import { SystemIcon } from '@components/Icon';\nimport { mergeRefs } from '@react-aria/utils';\nimport type { FC, ReactNode } from 'react';\nimport React from 'react';\nimport type { AriaButtonOptions, AriaTagProps } from 'react-aria';\nimport { useButton, useFocusRing, useTag } from 'react-aria';\nimport type { ListState } from 'react-stately';\nimport { Tag } from './Tag';\nimport { closeButtonClass, tagItemClass } from './Tag.css';\n\nconst CloseButton: FC<AriaButtonOptions<'button'>> = (props) => {\n  const ref = React.useRef(null);\n  const { buttonProps } = useButton(props, ref);\n\n  return (\n    <button className={closeButtonClass} {...buttonProps} ref={ref}>\n      <SystemIcon.Close size=\"sm\" />\n    </button>\n  );\n};\n\ninterface IInternalTagItemProps extends AriaTagProps<object> {\n  state: ListState<object>;\n  children?: React.ReactNode;\n  asChild?: boolean;\n}\n\n/**\n * @private\n */\nexport const InternalTagItem: FC<IInternalTagItemProps> = ({\n  children,\n  asChild,\n  ...props\n}) => {\n  const { state } = props;\n  const ref = React.useRef(null);\n  const { focusProps, isFocusVisible } = useFocusRing({ within: true });\n  const { rowProps, gridCellProps, removeButtonProps, allowsRemoving } = useTag(\n    props,\n    state,\n    ref,\n  );\n\n  const getContent = (content: ReactNode): ReactNode => (\n    <Tag {...gridCellProps}>\n      {content}\n      {allowsRemoving && <CloseButton {...removeButtonProps} />}\n    </Tag>\n  );\n\n  if (asChild && React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      className: tagItemClass,\n      ...children.props,\n      ...rowProps,\n      ...focusProps,\n      'data-focus-visible': isFocusVisible,\n      ref: mergeRefs(ref, (children as any).ref),\n      children: getContent(children.props.children),\n    });\n  }\n\n  return (\n    <div\n      className={tagItemClass}\n      ref={ref}\n      {...rowProps}\n      {...focusProps}\n      data-focus-visible={isFocusVisible}\n    >\n      {getContent(children)}\n    </div>\n  );\n};\n"]}