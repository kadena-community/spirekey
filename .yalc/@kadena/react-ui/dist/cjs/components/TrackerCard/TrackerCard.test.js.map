{"version":3,"file":"TrackerCard.test.js","sourceRoot":"","sources":["../../../../src/components/TrackerCard/TrackerCard.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { render, screen } from '@testing-library/react';\nimport React from 'react';\nimport { beforeEach, describe, expect, test } from 'vitest';\nimport type { ILabelValue } from './TrackerCard';\nimport { TrackerCard } from './TrackerCard';\n\ndescribe('TrackerCard', () => {\n  let labelValue: ILabelValue[];\n  beforeEach(() => {\n    labelValue = [\n      {\n        label: 'Account',\n        value: 'k:1234567890abcdef',\n        isAccount: true,\n      },\n      {\n        label: 'Balance',\n        value: '1000',\n      },\n    ];\n  });\n\n  test('renders correctly', () => {\n    const { getByTestId } = render(\n      <TrackerCard\n        labelValues={labelValue}\n        variant=\"vertical\"\n        helperText=\"helper text\"\n        helperTextType=\"mild\"\n        icon=\"QuickStart\"\n      />,\n    );\n\n    const trackerCard = getByTestId('kda-tracker-card');\n    const icon = getByTestId('kda-icon');\n    const dataContainer = getByTestId('kda-data-container');\n    const firstLabelValueContainer = getByTestId('kda-label-value-container-0');\n    const firstLabel = getByTestId('kda-label-0');\n    const maskedValue = getByTestId('kda-masked-value');\n    const secondLabelValueContainer = getByTestId(\n      'kda-label-value-container-1',\n    );\n    const secondLabel = getByTestId('kda-label-1');\n    const value = getByTestId('kda-value-1');\n    const helperText = getByTestId('kda-helper-text');\n\n    expect(trackerCard).toBeInTheDocument();\n    expect(icon).toBeInTheDocument();\n    expect(dataContainer).toBeInTheDocument();\n    expect(firstLabelValueContainer).toBeInTheDocument();\n    expect(firstLabel).toBeInTheDocument();\n    expect(maskedValue).toBeInTheDocument();\n    expect(secondLabelValueContainer).toBeInTheDocument();\n    expect(secondLabel).toBeInTheDocument();\n    expect(value).toBeInTheDocument();\n    expect(helperText).toBeInTheDocument();\n  });\n\n  test('displays correct content', () => {\n    render(\n      <TrackerCard\n        labelValues={labelValue}\n        variant=\"vertical\"\n        helperText=\"helper text\"\n        helperTextType=\"mild\"\n        icon=\"QuickStart\"\n      />,\n    );\n\n    expect(screen.getByText('Account')).toBeInTheDocument();\n    expect(screen.getByText('k:1234****cdef')).toBeInTheDocument();\n    expect(screen.getByText('Balance')).toBeInTheDocument();\n    expect(screen.getByText('1000')).toBeInTheDocument();\n    expect(screen.getByText('helper text')).toBeInTheDocument();\n  });\n  test('icons and value not in document', () => {\n    const { getByTestId } = render(\n      <TrackerCard\n        labelValues={labelValue.splice(0, 1)}\n        variant=\"vertical\"\n        helperText=\"helper text\"\n        helperTextType=\"mild\"\n        icon={undefined}\n      />,\n    );\n\n    const labelValueContainer = getByTestId('kda-label-value-container-0');\n    const maskedValue = getByTestId('kda-masked-value');\n    const label = getByTestId('kda-label-0');\n\n    expect(labelValueContainer).toBeInTheDocument();\n    expect(maskedValue).toBeInTheDocument();\n    expect(screen.getByText('k:1234****cdef')).toBeInTheDocument();\n    expect(label).toBeInTheDocument();\n    expect(screen.getByText('Account')).toBeInTheDocument();\n    expect(screen.queryByTestId('kda-icon')).not.toBeInTheDocument();\n    expect(screen.queryByTestId('kda-value-0')).not.toBeInTheDocument();\n  });\n\n  test('masked value not in document', () => {\n    const { getByTestId } = render(\n      <TrackerCard\n        labelValues={labelValue.splice(-1)}\n        variant=\"vertical\"\n        helperText=\"helper text\"\n        helperTextType=\"mild\"\n        icon=\"QuickStart\"\n      />,\n    );\n\n    const labelValueContainer = getByTestId('kda-label-value-container-0');\n    const label = getByTestId('kda-label-0');\n    const value = getByTestId('kda-value-0');\n\n    expect(labelValueContainer).toBeInTheDocument();\n    expect(label).toBeInTheDocument();\n    expect(screen.getByText('Balance')).toBeInTheDocument();\n    expect(value).toBeInTheDocument();\n    expect(screen.getByText('1000')).toBeInTheDocument();\n    expect(screen.queryByTestId('kda-masked-value')).not.toBeInTheDocument();\n  });\n\n  test('empty labelValue prop and helper text results in no label-value containers and no helper text', () => {\n    const { getByTestId } = render(\n      <TrackerCard labelValues={[]} variant=\"vertical\" icon=\"QuickStart\" />,\n    );\n\n    const trackerCard = getByTestId('kda-tracker-card');\n    const icon = getByTestId('kda-icon');\n    const dataContainer = getByTestId('kda-data-container');\n\n    expect(trackerCard).toBeInTheDocument();\n    expect(icon).toBeInTheDocument();\n    expect(dataContainer).toBeInTheDocument();\n    expect(\n      screen.queryByTestId('kda-label-value-container-0'),\n    ).not.toBeInTheDocument();\n    expect(screen.queryByTestId('kda-masked-value')).not.toBeInTheDocument();\n    expect(screen.queryByTestId('kda-label-0')).not.toBeInTheDocument();\n    expect(screen.queryByTestId('kda-value-0')).not.toBeInTheDocument();\n    expect(screen.queryByTestId('kda-helper-text')).not.toBeInTheDocument();\n  });\n\n  test('no more label-value containers than necessary', () => {\n    const { getByTestId } = render(\n      <TrackerCard\n        labelValues={labelValue}\n        variant=\"horizontal\"\n        helperText=\"helper text\"\n        helperTextType=\"mild\"\n        icon=\"QuickStart\"\n      />,\n    );\n\n    const firstLabelValueContainer = getByTestId('kda-label-value-container-0');\n    const secondLabelValueContainer = getByTestId(\n      'kda-label-value-container-1',\n    );\n\n    expect(firstLabelValueContainer).toBeInTheDocument();\n    expect(secondLabelValueContainer).toBeInTheDocument();\n    expect(\n      screen.queryByTestId('kda-label-value-container-2'),\n    ).not.toBeInTheDocument();\n  });\n\n  test('masked value should not be masked when default visible is true', () => {\n    const { getByTestId } = render(\n      <TrackerCard\n        labelValues={[\n          {\n            label: 'Account',\n            value: 'k:1234567890abcdef',\n            isAccount: true,\n            defaultVisible: true,\n          },\n        ]}\n        variant=\"horizontal\"\n        icon=\"QuickStart\"\n      />,\n    );\n\n    const maskedValue = getByTestId('kda-masked-value');\n\n    expect(maskedValue).toBeInTheDocument();\n    expect(screen.getByText('k:1234567890abcdef')).toBeInTheDocument();\n  });\n});\n"]}