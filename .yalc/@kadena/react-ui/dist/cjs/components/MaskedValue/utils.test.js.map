{"version":3,"file":"utils.test.js","sourceRoot":"","sources":["../../../../src/components/MaskedValue/utils.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, expect, it } from 'vitest';\nimport { maskValue } from './utils';\n\ndescribe('maskValue', () => {\n  it('should mask value', () => {\n    expect(maskValue('abcdefghijklmnopqrstuvwxyz')).toEqual('abcdef****wxyz');\n    expect(\n      maskValue(\n        'k:4f0befc9ae690e3b2966d9e9a119269334e87892af2505ec4160016561bfbc18',\n      ),\n    ).toEqual('k:4f0b****bc18');\n\n    // Edge cases\n    expect(maskValue('K:003f****0769')).toEqual('K:003f****0769');\n    expect(maskValue('K:8dea****bae6')).toEqual('K:8dea****bae6');\n    expect(maskValue('K:f054****2f43')).toEqual('K:f054****2f43');\n\n    expect(maskValue('a')).toEqual('a');\n    expect(maskValue('123456')).toEqual('123456');\n  });\n\n  it('should mask value with custom options', () => {\n    expect(maskValue('abcdefghijklmnopqrstuvwxyz', { maskLength: 2 })).toEqual(\n      'abcdef**wxyz',\n    );\n    expect(maskValue('abcdefghijklmnopqrstuvwxyz', { character: '#' })).toEqual(\n      'abcdef####wxyz',\n    );\n    expect(maskValue('abcdefghijklmnopqrstuvwxyz', { headLength: 3 })).toEqual(\n      'abc****wxyz',\n    );\n    expect(maskValue('abcdefghijklmnopqrstuvwxyz', { tailLength: 3 })).toEqual(\n      'abcdef****xyz',\n    );\n    expect(\n      maskValue('abcdefghijklmnopqrstuvwxyz', {\n        maskLength: 1,\n        character: '2',\n        headLength: 1,\n        tailLength: 1,\n      }),\n    ).toEqual('a2z');\n\n    // Edge cases\n    expect(maskValue('abcdefghijklmnopqrstuvwxyz', { maskLength: 0 })).toEqual(\n      'abcdefwxyz',\n    );\n    expect(\n      maskValue('abcdefghijklmnopqrstuvwxyz', { maskLength: -10 }),\n    ).toEqual('abcdefwxyz');\n    expect(\n      maskValue('abcdefghijklmnopqrstuvwxyz', {\n        maskLength: 'abcdefghijklmnopqrstuvwxyz'.length,\n      }),\n    ).toEqual('**************************');\n    expect(maskValue('abcdefghijklmnopqrstuvwxyz', { headLength: 0 })).toEqual(\n      '****wxyz',\n    );\n    expect(maskValue('abcdefghijklmnopqrstuvwxyz', { tailLength: 0 })).toEqual(\n      'abcdef****',\n    );\n    expect(maskValue('abcdefghijklmnopqrstuvwxyz', { headLength: -5 })).toEqual(\n      '****wxyz',\n    );\n    expect(maskValue('abcdefghijklmnopqrstuvwxyz', { tailLength: -8 })).toEqual(\n      'abcdef****',\n    );\n  });\n\n  it('should throw an error if character is longer than 1', () => {\n    expect(() => maskValue('1234567890', { character: 'toolong' })).toThrow();\n  });\n});\n"]}