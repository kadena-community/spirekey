{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/components/MaskedValue/utils.ts"],"names":[],"mappings":";;;AAGA,MAAM,cAAc,GAAG;IACrB,SAAS,EAAE,GAAG;IACd,UAAU,EAAE,CAAC;IACb,UAAU,EAAE,CAAC;IACb,UAAU,EAAE,CAAC;CACd,CAAC;AAIK,MAAM,SAAS,GAAG,CACvB,KAAa,EACb,OAA8B,EACtB,EAAE;IACV,MAAM,EACJ,SAAS,EACT,UAAU,EAAE,WAAW,EACvB,UAAU,EAAE,WAAW,EACvB,UAAU,EAAE,WAAW,GACxB,GAAG;QACF,GAAG,cAAc;QACjB,GAAG,OAAO;KACX,CAAC;IAEF,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;QACxB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;KAClD;IAED,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;IAC5C,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;IAC5C,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;IAE5C,IAAI,UAAU,GAAG,UAAU,IAAI,KAAK,CAAC,MAAM,EAAE;QAC3C,OAAO,KAAK,CAAC;KACd;IAED,IAAI,UAAU,IAAI,KAAK,CAAC,MAAM,EAAE;QAC9B,OAAO,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;KACvC;IAED,MAAM,YAAY,GAAG,UAAU,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;IACxE,MAAM,aAAa,GAAG,UAAU,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,CAAC;IACvE,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,UAAU,GAAG,UAAU,CAAC,CAAC;IAE5D,MAAM,IAAI,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;IAEhE,OAAO,GAAG,YAAY,GAAG,IAAI,GAAG,aAAa,EAAE,CAAC;AAClD,CAAC,CAAC;AArCW,QAAA,SAAS,aAqCpB","sourcesContent":["// eslint-disable-next-line @kadena-dev/no-eslint-disable\n/* eslint-disable @kadena-dev/typedef-var */\n\nconst defaultOptions = {\n  character: '*',\n  maskLength: 4,\n  headLength: 6,\n  tailLength: 4,\n};\n\nexport type MaskOptions = typeof defaultOptions;\n\nexport const maskValue = (\n  value: string,\n  options?: Partial<MaskOptions>,\n): string => {\n  const {\n    character,\n    maskLength: _maskLength,\n    headLength: _headLength,\n    tailLength: _tailLength,\n  } = {\n    ...defaultOptions,\n    ...options,\n  };\n\n  if (character.length > 1) {\n    throw new Error('Only one character is allowed');\n  }\n\n  const maskLength = Math.max(0, _maskLength);\n  const headLength = Math.max(0, _headLength);\n  const tailLength = Math.max(0, _tailLength);\n\n  if (headLength + tailLength >= value.length) {\n    return value;\n  }\n\n  if (maskLength >= value.length) {\n    return character.repeat(value.length);\n  }\n\n  const leftHandSide = headLength === 0 ? '' : value.slice(0, headLength);\n  const rightHandSide = tailLength === 0 ? '' : value.slice(-tailLength);\n  const restLength = value.length - (headLength + tailLength);\n\n  const mask = character.repeat(Math.min(restLength, maskLength));\n\n  return `${leftHandSide}${mask}${rightHandSide}`;\n};\n"]}