{"version":3,"file":"Accordion.js","sourceRoot":"","sources":["../../../../src/components/Accordion/Accordion.tsx"],"names":[],"mappings":";AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;AAEb,+CAAwC;AAGxC,2DAAuD;AAQhD,MAAM,aAAa,GAA4B,CAAC,EACrD,QAAQ,EACR,MAAM,GAAG,KAAK,EACd,kBAAkB,GAAG,EAAE,GACxB,EAAE,EAAE;IACH,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GACnC,IAAA,gBAAQ,EAAe,kBAAkB,CAAC,CAAC;IAE7C,OAAO,CACL,8BAAC,oCAAgB,CAAC,QAAQ,IACxB,KAAK,EAAE,EAAE,YAAY,EAAE,eAAe,EAAE,MAAM,EAAE,IAE/C,QAAQ,CACiB,CAC7B,CAAC;AACJ,CAAC,CAAC;AAfW,QAAA,aAAa,iBAexB","sourcesContent":["'use client';\nimport type { FC, FunctionComponentElement } from 'react';\nimport React, { useState } from 'react';\nimport type { IAccordionSectionProps } from '.';\nimport type { OpenSections } from './Accordion.context';\nimport { AccordionContext } from './Accordion.context';\n\nexport interface IAccordionRootProps {\n  children?: FunctionComponentElement<IAccordionSectionProps>[];\n  linked?: boolean;\n  initialOpenSection?: OpenSections;\n}\n\nexport const AccordionRoot: FC<IAccordionRootProps> = ({\n  children,\n  linked = false,\n  initialOpenSection = [],\n}) => {\n  const [openSections, setOpenSections] =\n    useState<OpenSections>(initialOpenSection);\n\n  return (\n    <AccordionContext.Provider\n      value={{ openSections, setOpenSections, linked }}\n    >\n      {children}\n    </AccordionContext.Provider>\n  );\n};\n"]}