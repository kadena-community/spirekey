{"version":3,"file":"NavHeaderNavigation.js","sourceRoot":"","sources":["../../../../src/components/NavHeader/NavHeaderNavigation.tsx"],"names":[],"mappings":";AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEb,+CAAmD;AACnD,mDAA2E;AAE3E,+EAA2E;AAC3E,qCAAqC;AACrC,wDAAgC;AAOzB,MAAM,mBAAmB,GAAkC,CAAC,EACjE,QAAQ,EACR,UAAU,GACX,EAAE,EAAE;IACH,MAAM,CAAC,WAAW,EAAE,aAAa,CAAC,GAAG,IAAA,gBAAQ,EAAqB,UAAU,CAAC,CAAC;IAC9E,MAAM,EAAE,KAAK,EAAE,iBAAiB,EAAE,OAAO,EAAE,MAAM,EAAE,eAAe,EAAE,GAClE,IAAA,iBAAO,GAAE,CAAC;IAEZ,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,UAAU,KAAK,WAAW,EAAE;YAC9B,aAAa,CAAC,UAAU,CAAC,CAAC;SAC3B;IACH,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IAEjB,OAAO,CACL,8BAAC,wDAA0B,CAAC,QAAQ,IAClC,KAAK,EAAE,EAAE,eAAe,EAAE,UAAU,EAAE,WAAW,EAAE,aAAa,EAAE;QAElE,uCAAK,SAAS,EAAE,+BAAe,EAAE,GAAG,EAAE,MAAM,gBAAa,MAAM,EAAC,GAAG,EAAC,KAAK;YACvE,uCACE,IAAI,EAAC,MAAM,EACX,SAAS,EAAE,yBAAS,EACpB,GAAG,EAAE,OAAO,EACZ,KAAK,EAAE;oBACL,OAAO,EAAE,CAAC;oBACV,SAAS,EAAE,cAAc,KAAK,KAAK;oBACnC,kBAAkB,EAAE,GAAG,iBAAiB,IAAI;iBAC7C;gBAED,8BAAC,cAAO,OAAG,CACP;YACN,sCAAI,SAAS,EAAE,4BAAY,IAAG,QAAQ,CAAM,CACxC,CAC8B,CACvC,CAAC;AACJ,CAAC,CAAC;AAnCW,QAAA,mBAAmB,uBAmC9B","sourcesContent":["'use client';\nimport type { FC, FunctionComponentElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { glowClass, navListClass, navWrapperClass } from './NavHeader.css';\nimport type { INavHeaderLinkProps } from './NavHeaderLink';\nimport { NavHeaderNavigationContext } from './NavHeaderNavigation.context';\nimport { NavGlow } from './svg/glow';\nimport useGlow from './useGlow';\n\nexport interface INavHeaderNavigationProps {\n  children: FunctionComponentElement<INavHeaderLinkProps>[];\n  activeHref?: string;\n}\n\nexport const NavHeaderNavigation: FC<INavHeaderNavigationProps> = ({\n  children,\n  activeHref,\n}) => {\n  const [_activeHref, setActiveHref] = useState<string | undefined>(activeHref);\n  const { glowX, animationDuration, glowRef, navRef, setGlowPosition } =\n    useGlow();\n\n  useEffect(() => {\n    if (activeHref !== _activeHref) {\n      setActiveHref(activeHref);\n    }\n  }, [activeHref]);\n\n  return (\n    <NavHeaderNavigationContext.Provider\n      value={{ setGlowPosition, activeHref: _activeHref, setActiveHref }}\n    >\n      <nav className={navWrapperClass} ref={navRef} aria-label=\"main\" dir=\"ltr\">\n        <div\n          role=\"none\"\n          className={glowClass}\n          ref={glowRef}\n          style={{\n            opacity: 1,\n            transform: `translateX(${glowX}px)`,\n            transitionDuration: `${animationDuration}ms`,\n          }}\n        >\n          <NavGlow />\n        </div>\n        <ul className={navListClass}>{children}</ul>\n      </nav>\n    </NavHeaderNavigationContext.Provider>\n  );\n};\n"]}