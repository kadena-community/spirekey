{"version":3,"file":"Dialog.js","sourceRoot":"","sources":["../../../../src/components/Dialog/Dialog.tsx"],"names":[],"mappings":";;;;;;AAAA,6CAAiD;AACjD,4DAA4B;AAE5B,kDAA0B;AAE1B,2CAAmD;AAEnD,iDAAuD;AACvD,kCAAqC;AAErC,0CAAuC;AACvC,qDAAiD;AACjD,6CAA8D;AAS9D,MAAM,UAAU,GAAG,eAAK,CAAC,UAAU,CACjC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;;IACb,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,aAAa,GAAG,IAAI,EAAE,KAAK,EAAE,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC;IAC5E,MAAM,SAAS,GAAG,IAAA,oBAAY,EAAwB,GAAG,CAAC,CAAC;IAC3D,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,IAAA,sBAAS,EAC3C;QACE,IAAI,EAAE,MAAA,KAAK,CAAC,IAAI,mCAAI,QAAQ;QAC5B,GAAG,IAAI;KACR,EACD,SAAS,CACV,CAAC;IAEF,OAAO,CACL,8BAAC,8BAAa,CAAC,QAAQ,IAAC,KAAK,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE;QAClD,uCACE,GAAG,EAAE,SAAS,EACd,SAAS,EAAE,IAAA,oBAAE,EAAC,yBAAY,EAAE,SAAS,CAAC,KAClC,IAAA,uBAAU,EAAC,IAAI,EAAE,WAAW,CAAC;YAEhC,OAAO,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ;YAE3D,aAAa,IAAI,CAChB,0CACE,SAAS,EAAE,6BAAgB,EAC3B,OAAO,EAAE,KAAK,CAAC,KAAK,gBACT,aAAa,EACxB,KAAK,EAAC,aAAa;gBAEnB,8BAAC,iBAAU,CAAC,KAAK,OAAG,CACb,CACV,CACG,CACiB,CAC1B,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,UAAU,CAAC,WAAW,GAAG,YAAY,CAAC;AAS/B,MAAM,MAAM,GAAqB,CAAC,EACvC,QAAQ,EACR,aAAa,GAAG,IAAI,EACpB,yBAAyB,EACzB,MAAM,EACN,WAAW,EACX,YAAY,EACZ,GAAG,KAAK,EACT,EAAE,EAAE;IACH,MAAM,KAAK,GAAG,IAAA,sCAAsB,EAAC;QACnC,MAAM;QACN,WAAW;QACX,YAAY;KACb,CAAC,CAAC;IAEH,OAAO,CACL,8BAAC,aAAK,IAAC,yBAAyB,EAAE,yBAAyB,EAAE,KAAK,EAAE,KAAK;QACvE,8BAAC,UAAU,IAAC,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE,aAAa,KAAM,KAAK,IAC9D,QAAQ,CACE,CACP,CACT,CAAC;AACJ,CAAC,CAAC;AAtBW,QAAA,MAAM,UAsBjB","sourcesContent":["import { useObjectRef } from '@react-aria/utils';\nimport cn from 'classnames';\nimport type { FC, ReactNode } from 'react';\nimport React from 'react';\nimport type { AriaDialogProps } from 'react-aria';\nimport { mergeProps, useDialog } from 'react-aria';\nimport type { OverlayTriggerState } from 'react-stately';\nimport { useOverlayTriggerState } from 'react-stately';\nimport { SystemIcon } from '../Icon';\nimport type { IModalProps } from '../Modal/Modal';\nimport { Modal } from '../Modal/Modal';\nimport { DialogContext } from './Dialog.context';\nimport { closeButtonClass, overlayClass } from './Dialog.css';\n\ninterface IBaseDialogProps\n  extends Omit<IModalProps, 'children'>,\n    AriaDialogProps {\n  children?: ((state: OverlayTriggerState) => ReactNode) | ReactNode;\n  className?: string;\n}\n\nconst BaseDialog = React.forwardRef<HTMLDivElement, IBaseDialogProps>(\n  (props, ref) => {\n    const { className, children, isDismissable = true, state, ...rest } = props;\n    const dialogRef = useObjectRef<HTMLDivElement | null>(ref);\n    const { dialogProps, titleProps } = useDialog(\n      {\n        role: props.role ?? 'dialog',\n        ...rest,\n      },\n      dialogRef,\n    );\n\n    return (\n      <DialogContext.Provider value={{ titleProps, state }}>\n        <div\n          ref={dialogRef}\n          className={cn(overlayClass, className)}\n          {...mergeProps(rest, dialogProps)}\n        >\n          {typeof children === 'function' ? children(state) : children}\n\n          {isDismissable && (\n            <button\n              className={closeButtonClass}\n              onClick={state.close}\n              aria-label=\"Close Modal\"\n              title=\"Close Modal\"\n            >\n              <SystemIcon.Close />\n            </button>\n          )}\n        </div>\n      </DialogContext.Provider>\n    );\n  },\n);\n\nBaseDialog.displayName = 'BaseDialog';\n\nexport interface IDialogProps extends Omit<IBaseDialogProps, 'state'> {\n  children?: ((state: OverlayTriggerState) => ReactNode) | ReactNode;\n  isOpen?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (isOpen: boolean) => void;\n}\n\nexport const Dialog: FC<IDialogProps> = ({\n  children,\n  isDismissable = true,\n  isKeyboardDismissDisabled,\n  isOpen,\n  defaultOpen,\n  onOpenChange,\n  ...props\n}) => {\n  const state = useOverlayTriggerState({\n    isOpen,\n    defaultOpen,\n    onOpenChange,\n  });\n\n  return (\n    <Modal isKeyboardDismissDisabled={isKeyboardDismissDisabled} state={state}>\n      <BaseDialog state={state} isDismissable={isDismissable} {...props}>\n        {children}\n      </BaseDialog>\n    </Modal>\n  );\n};\n"]}