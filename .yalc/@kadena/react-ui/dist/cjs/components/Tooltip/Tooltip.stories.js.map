{"version":3,"file":"Tooltip.stories.js","sourceRoot":"","sources":["../../../../src/components/Tooltip/Tooltip.stories.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uDAAoD;AAEpD,gEAA6D;AAC7D,+CAAsC;AAEtC,yBAA6B;AAC7B,+CAA0C;AAE1C,MAAM,IAAI,GAIN;IACF,KAAK,EAAE,oBAAoB;IAC3B,SAAS,EAAE,UAAO,CAAC,IAAI;IACvB,UAAU,EAAE,CAAC,qCAAiB,CAAC;IAC/B,UAAU,EAAE;QACV,IAAI,EAAE;YACJ,WAAW,EAAE;gBACX,SAAS,EACP,iMAAiM;aACpM;SACF;KACF;IACD,QAAQ,EAAE;QACR,IAAI,EAAE;YACJ,OAAO,EAAE;gBACP,IAAI,EAAE,MAAM;aACb;SACF;QACD,SAAS,EAAE;YACT,OAAO,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC;YAC3C,OAAO,EAAE;gBACP,IAAI,EAAE,QAAQ;aACf;SACF;KACF;CACF,CAAC;AAEF,kBAAe,IAAI,CAAC;AAOP,QAAA,OAAO,GAAU;IAC5B,IAAI,EAAE,SAAS;IACf,IAAI,EAAE;QACJ,IAAI,EAAE,4BAA4B;QAClC,SAAS,EAAE,OAAO;KACnB;IACD,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE;QAC9B,MAAM,GAAG,GAAG,IAAA,cAAM,EAAiB,IAAI,CAAC,CAAC;QAEzC,OAAO,CACL,uCAAK,SAAS,EAAE,uBAAS;YACvB,8BAAC,uBAAU,IACT,KAAK,EAAC,UAAU,EAChB,IAAI,EAAC,aAAa,EAClB,YAAY,EAAE,CAAC,CAAgC,EAAE,EAAE,CACjD,UAAO,CAAC,OAAO,CAAC,CAAC,EAAE,GAAG,CAAC,EAEzB,YAAY,EAAE,CAAC,CAAsC,EAAE,EAAE,CACvD,UAAO,CAAC,OAAO,CAAC,CAAC,EAAE,GAAG,CAAC,GAEzB;YAEF,8BAAC,UAAO,CAAC,IAAI,IAAC,SAAS,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,IACzC,IAAI,CACQ,CACX,CACP,CAAC;IACJ,CAAC;CACF,CAAC","sourcesContent":["import { IconButton } from '@components/IconButton';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { withCenteredStory } from '@utils/withCenteredStory';\nimport React, { useRef } from 'react';\nimport type { ITooltipProps } from './';\nimport { Tooltip } from './';\nimport { container } from './stories.css';\n\nconst meta: Meta<\n  {\n    text: string;\n  } & ITooltipProps\n> = {\n  title: 'Components/Tooltip',\n  component: Tooltip.Root,\n  decorators: [withCenteredStory],\n  parameters: {\n    docs: {\n      description: {\n        component:\n          'The Tooltip component renders a tooltip with text. The placement of the tooltip can be set with the `placement` prop. The tooltip can be triggered by hovering over the `IconButton` component.',\n      },\n    },\n  },\n  argTypes: {\n    text: {\n      control: {\n        type: 'text',\n      },\n    },\n    placement: {\n      options: ['top', 'bottom', 'left', 'right'],\n      control: {\n        type: 'select',\n      },\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<\n  {\n    text: string;\n  } & ITooltipProps\n>;\n\nexport const Dynamic: Story = {\n  name: 'Tooltip',\n  args: {\n    text: \"I'm a tooltip, look at me!\",\n    placement: 'right',\n  },\n  render: ({ text, placement }) => {\n    const ref = useRef<HTMLDivElement>(null);\n\n    return (\n      <div className={container}>\n        <IconButton\n          title=\"hover me\"\n          icon=\"Information\"\n          onMouseEnter={(e: React.MouseEvent<HTMLElement>) =>\n            Tooltip.handler(e, ref)\n          }\n          onMouseLeave={(e: React.MouseEvent<HTMLButtonElement>) =>\n            Tooltip.handler(e, ref)\n          }\n        />\n\n        <Tooltip.Root placement={placement} ref={ref}>\n          {text}\n        </Tooltip.Root>\n      </div>\n    );\n  },\n};\n"]}