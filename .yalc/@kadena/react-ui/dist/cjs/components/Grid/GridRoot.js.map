{"version":3,"file":"GridRoot.js","sourceRoot":"","sources":["../../../../src/components/Grid/GridRoot.tsx"],"names":[],"mappings":";;;;;;AACA,wDAAiD;AACjD,4DAAoC;AAEpC,kDAA0B;AAE1B,yCAIoB;AAyBpB,MAAM,sBAAsB,GAAG,CAC7B,OAA4B,EACT,EAAE;IACrB,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;QAC/B,OAAO,kCAAuB,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;KAC5C;IAED,OAAO,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;QAClD,OAAO,kCAAuB,CAAC,GAA2C,CAAC,CACzE,KAAK,CACN,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEK,MAAM,QAAQ,GAAuB,CAAC,EAC3C,QAAQ,EACR,OAAO,EACP,MAAM,GAAG,SAAS,EAClB,OAAO,GAAG,SAAS,EACnB,OAAO,GAAG,SAAS,EACnB,SAAS,GAAG,SAAS,EACrB,YAAY,GAAG,SAAS,EACxB,UAAU,GAAG,SAAS,EACtB,WAAW,GAAG,SAAS,EACvB,GAAG,GAAG,KAAK,EACX,OAAO,GAAG,SAAS,EACnB,QAAQ,GAAG,SAAS,EACpB,QAAQ,GAAG,SAAS,EACpB,UAAU,GAAG,SAAS,EACtB,aAAa,GAAG,SAAS,EACzB,WAAW,GAAG,SAAS,EACvB,YAAY,GAAG,SAAS,GACzB,EAAE,EAAE;IACH,MAAM,SAAS,GAAG,IAAA,oBAAU,EAC1B,sBAAW,CAAC,GAAG,CAAC,EAChB,6BAAkB,EAClB,OAAO,IAAI,sBAAsB,CAAC,OAAO,CAAC,EAC1C,IAAA,yBAAS,EAAC;QACR,MAAM;QACN,OAAO;QACP,OAAO;QACP,SAAS;QACT,YAAY;QACZ,UAAU;QACV,WAAW;QACX,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,UAAU;QACV,aAAa;QACb,WAAW;QACX,YAAY;KACb,CAAC,CACH,CAAC;IACF,OAAO,CACL,uCAAK,SAAS,EAAE,SAAS,iBAAc,eAAe,IACnD,QAAQ,CACL,CACP,CAAC;AACJ,CAAC,CAAC;AA7CW,QAAA,QAAQ,YA6CnB","sourcesContent":["import type { Sprinkles } from '@theme/sprinkles.css';\nimport { sprinkles } from '@theme/sprinkles.css';\nimport classNames from 'classnames';\nimport type { FC, ReactNode } from 'react';\nimport React from 'react';\nimport type { ResponsiveInputType } from './Grid.css';\nimport {\n  containerColumnVariants,\n  gapVariants,\n  gridContainerClass,\n} from './Grid.css';\n\nexport interface IGridRootProps\n  extends Pick<\n    Sprinkles,\n    | 'margin'\n    | 'marginX'\n    | 'marginY'\n    | 'marginTop'\n    | 'marginBottom'\n    | 'marginLeft'\n    | 'marginRight'\n    | 'padding'\n    | 'paddingX'\n    | 'paddingY'\n    | 'paddingTop'\n    | 'paddingBottom'\n    | 'paddingLeft'\n    | 'paddingRight'\n  > {\n  children?: ReactNode;\n  columns?: ResponsiveInputType;\n  gap?: keyof typeof gapVariants;\n}\n\nconst assembleColumnVariants = (\n  columns: ResponsiveInputType,\n): string | string[] => {\n  if (typeof columns === 'number') {\n    return containerColumnVariants.xs[columns];\n  }\n\n  return Object.entries(columns).map(([key, value]) => {\n    return containerColumnVariants[key as keyof typeof containerColumnVariants][\n      value\n    ];\n  });\n};\n\nexport const GridRoot: FC<IGridRootProps> = ({\n  children,\n  columns,\n  margin = undefined,\n  marginX = undefined,\n  marginY = undefined,\n  marginTop = undefined,\n  marginBottom = undefined,\n  marginLeft = undefined,\n  marginRight = undefined,\n  gap = '$md',\n  padding = undefined,\n  paddingX = undefined,\n  paddingY = undefined,\n  paddingTop = undefined,\n  paddingBottom = undefined,\n  paddingLeft = undefined,\n  paddingRight = undefined,\n}) => {\n  const classList = classNames(\n    gapVariants[gap],\n    gridContainerClass,\n    columns && assembleColumnVariants(columns),\n    sprinkles({\n      margin,\n      marginX,\n      marginY,\n      marginTop,\n      marginBottom,\n      marginLeft,\n      marginRight,\n      padding,\n      paddingX,\n      paddingY,\n      paddingTop,\n      paddingBottom,\n      paddingLeft,\n      paddingRight,\n    }),\n  );\n  return (\n    <div className={classList} data-testid=\"kda-grid-root\">\n      {children}\n    </div>\n  );\n};\n"]}