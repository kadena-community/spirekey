{"version":3,"file":"Tabs.js","sourceRoot":"","sources":["../../../../src/components/Tabs/Tabs.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4DAA4B;AAE5B,+CAAiD;AAEjD,2CAAkE;AAClE,iDAAiE;AAUxD,wFAVQ,oBAAO,OAUR;AAThB,+BAA4B;AAC5B,yCAAsC;AACtC,yCAKoB;AAWb,MAAM,IAAI,GAAG,CAAC,EAAE,SAAS,EAAE,GAAG,KAAK,EAAc,EAAa,EAAE;;IACrE,MAAM,KAAK,GAAG,IAAA,+BAAe,EAAC,KAAK,CAAC,CAAC;IACrC,MAAM,YAAY,GAAG,IAAA,cAAM,EAAwB,IAAI,CAAC,CAAC;IACzD,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,GAAG,IAAA,yBAAY,EAAC;QAClD,MAAM,EAAE,IAAI;KACb,CAAC,CAAC;IAEH,MAAM,EAAE,YAAY,EAAE,GAAG,IAAA,uBAAU,EACjC,EAAE,GAAG,KAAK,EAAE,WAAW,EAAE,YAAY,EAAE,EACvC,KAAK,EACL,YAAY,CACb,CAAC;IAEF,MAAM,oBAAoB,GAAG,IAAA,cAAM,EAAyB,IAAI,CAAC,CAAC;IAElE,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,CAAC,YAAY,CAAC,OAAO,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE;YAC1D,OAAO;SACR;QAED,IAAI,QAAQ,GAAG,YAAY,CAAC,OAAO,CAAC,aAAa,CAC/C,wBAAwB,CACV,CAAC;QAEjB,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,EAAE;YAC/C,QAAQ,GAAG,YAAY,CAAC,OAAO,CAAC,gBAAgB,CAC9C,iBAAiB,CAClB,CAAC,CAAC,CAAgB,CAAC;SACrB;QAED,oBAAoB,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAC5C,WAAW,EACX,cAAc,QAAQ,CAAC,UAAU,KAAK,CACvC,CAAC;QACF,oBAAoB,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAC5C,OAAO,EACP,GAAG,QAAQ,CAAC,WAAW,IAAI,CAC5B,CAAC;IACJ,CAAC,EAAE,CAAC,YAAY,EAAE,MAAA,KAAK,CAAC,YAAY,0CAAE,GAAG,EAAE,oBAAoB,CAAC,CAAC,CAAC;IAElE,OAAO,CACL,uCAAK,SAAS,EAAE,IAAA,oBAAE,EAAC,6BAAkB,EAAE,SAAS,CAAC;QAC/C,uCAAK,SAAS,EAAE,8BAAmB;YACjC,uCACE,SAAS,EAAE,IAAA,oBAAE,EAAC,uBAAY,EAAE,EAAE,YAAY,EAAE,cAAc,EAAE,CAAC,KACzD,IAAA,uBAAU,EAAC,YAAY,EAAE,UAAU,CAAC,EACxC,GAAG,EAAE,YAAY;gBAEhB,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CACnC,8BAAC,SAAG,IAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,GAAI,CACjD,CAAC;gBACF,wCAAM,GAAG,EAAE,oBAAoB,EAAE,SAAS,EAAE,uBAAY,GAAS,CAC7D,CACF;QAEN,8BAAC,mBAAQ,IAAC,GAAG,EAAE,MAAA,KAAK,CAAC,YAAY,0CAAE,GAAG,EAAE,KAAK,EAAE,KAAK,GAAI,CACpD,CACP,CAAC;AACJ,CAAC,CAAC;AA1DW,QAAA,IAAI,QA0Df","sourcesContent":["import cn from 'classnames';\nimport type { ReactNode } from 'react';\nimport React, { useEffect, useRef } from 'react';\nimport type { AriaTabListProps } from 'react-aria';\nimport { mergeProps, useFocusRing, useTabList } from 'react-aria';\nimport { Item as TabItem, useTabListState } from 'react-stately';\nimport { Tab } from './Tab';\nimport { TabPanel } from './TabPanel';\nimport {\n  selectorLine,\n  tabListClass,\n  tabListWrapperClass,\n  tabsContainerClass,\n} from './Tabs.css';\n\nexport { TabItem };\n\nexport type ITabItemProps = React.ComponentProps<typeof TabItem>;\n\nexport interface ITabsProps\n  extends Omit<AriaTabListProps<object>, 'orientation' | 'items'> {\n  className?: string;\n}\n\nexport const Tabs = ({ className, ...props }: ITabsProps): ReactNode => {\n  const state = useTabListState(props);\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const { focusProps, isFocusVisible } = useFocusRing({\n    within: true,\n  });\n\n  const { tabListProps } = useTabList(\n    { ...props, orientation: 'horizontal' },\n    state,\n    containerRef,\n  );\n\n  const selectedUnderlineRef = useRef<HTMLSpanElement | null>(null);\n\n  useEffect(() => {\n    if (!containerRef.current || !selectedUnderlineRef.current) {\n      return;\n    }\n\n    let selected = containerRef.current.querySelector(\n      '[data-selected=\"true\"]',\n    ) as HTMLElement;\n\n    if (selected === undefined || selected === null) {\n      selected = containerRef.current.querySelectorAll(\n        'div[role=\"tab\"]',\n      )[0] as HTMLElement;\n    }\n\n    selectedUnderlineRef.current.style.setProperty(\n      'transform',\n      `translateX(${selected.offsetLeft}px)`,\n    );\n    selectedUnderlineRef.current.style.setProperty(\n      'width',\n      `${selected.offsetWidth}px`,\n    );\n  }, [containerRef, state.selectedItem?.key, selectedUnderlineRef]);\n\n  return (\n    <div className={cn(tabsContainerClass, className)}>\n      <div className={tabListWrapperClass}>\n        <div\n          className={cn(tabListClass, { focusVisible: isFocusVisible })}\n          {...mergeProps(tabListProps, focusProps)}\n          ref={containerRef}\n        >\n          {[...state.collection].map((item) => (\n            <Tab key={item.key} item={item} state={state} />\n          ))}\n          <span ref={selectedUnderlineRef} className={selectorLine}></span>\n        </div>\n      </div>\n\n      <TabPanel key={state.selectedItem?.key} state={state} />\n    </div>\n  );\n};\n"]}