{"version":3,"file":"NavAccordionSection.js","sourceRoot":"","sources":["../../../../src/components/NavAccordion/NavAccordionSection.tsx"],"names":[],"mappings":";AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACb,uEAK6C;AAC7C,2CAA8C;AAC9C,4DAAoC;AAEpC,+CAAoD;AACpD,iEAA6D;AAC7D,yDAG4B;AAE5B,2DAAwD;AAcjD,MAAM,mBAAmB,GAAkC,CAAC,EACjE,QAAQ,EACR,OAAO,EACP,MAAM,EACN,KAAK,GACN,EAAE,EAAE;IACH,MAAM,EAAE,YAAY,EAAE,eAAe,EAAE,MAAM,EAAE,GAC7C,IAAA,kBAAU,EAAC,0CAAmB,CAAC,CAAC;IAClC,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;IAC1D,MAAM,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAEhD,MAAM,WAAW,GAAG,GAAS,EAAE;QAC7B,IAAI,MAAM,EAAE;YACV,eAAe,CACb,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAC/D,CAAC;YACF,OAAO,aAAP,OAAO,uBAAP,OAAO,EAAI,CAAC;SACb;aAAM;YACL,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,YAAY,EAAE,SAAS,CAAC,CAAC,CAAC;YACrE,MAAM,aAAN,MAAM,uBAAN,MAAM,EAAI,CAAC;SACZ;IACH,CAAC,CAAC;IAEF,OAAO,CACL,2CAAS,SAAS,EAAE,qCAAqB;QACvC,0CACE,SAAS,EAAE,IAAA,oBAAU,EAAC,CAAC,oCAAoB,CAAC,CAAC,EAC7C,OAAO,EAAE,WAAW;YAEpB,sCAAI,SAAS,EAAE,0CAA0B,IAAG,KAAK,CAAM;YACvD,8BAAC,iBAAU,CAAC,KAAK,IACf,SAAS,EAAE,IAAA,oBAAU,EAAC,wCAAwB,EAAE;oBAC9C,MAAM;iBACP,CAAC,EACF,IAAI,EAAC,IAAI,GACT,CACK;QAER,QAAQ,IAAI,MAAM,IAAI,CACrB,sCAAI,SAAS,EAAE,wCAAqB,IACjC,gBAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE;YAChC,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,KAAK,qCAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;YAC/D,MAAM,SAAS,GACb,OAAO,KAAK,IAAI;gBACd,CAAC,CAAC,wCAAqB;gBACvB,CAAC,CAAC,4CAAyB,CAAC;YAChC,OAAO,8BAAC,OAAO,IAAC,SAAS,EAAE,SAAS,IAAG,KAAK,CAAW,CAAC;QAC1D,CAAC,CAAC,CACC,CACN,CACO,CACX,CAAC;AACJ,CAAC,CAAC;AApDW,QAAA,mBAAmB,uBAoD9B","sourcesContent":["'use client';\nimport {\n  accordionButtonClass,\n  accordionHeadingTitleClass,\n  accordionSectionClass,\n  accordionToggleIconClass,\n} from '@components/Accordion/Accordion.css';\nimport { SystemIcon } from '@components/Icon';\nimport classNames from 'classnames';\nimport type { FC, FunctionComponentElement as FCElement } from 'react';\nimport React, { Children, useContext } from 'react';\nimport { NavAccordionContext } from './NavAccordion.context';\nimport {\n  navAccordionListClass,\n  navAccordionListItemClass,\n} from './NavAccordion.css';\nimport type { INavAccordionGroupProps } from './NavAccordionGroup';\nimport { NavAccordionGroup } from './NavAccordionGroup';\nimport type { INavAccordionLinkProps } from './NavAccordionLink';\n\nexport interface INavAccordionSectionProps {\n  children?:\n    | FCElement<INavAccordionGroupProps>[]\n    | FCElement<INavAccordionLinkProps>[]\n    | FCElement<INavAccordionGroupProps>\n    | FCElement<INavAccordionLinkProps>;\n  onClose?: () => void;\n  onOpen?: () => void;\n  title: string;\n}\n\nexport const NavAccordionSection: FC<INavAccordionSectionProps> = ({\n  children,\n  onClose,\n  onOpen,\n  title,\n}) => {\n  const { openSections, setOpenSections, linked } =\n    useContext(NavAccordionContext);\n  const sectionId = title.replace(/\\s+/g, '').toLowerCase();\n  const isOpen = openSections.includes(sectionId);\n\n  const handleClick = (): void => {\n    if (isOpen) {\n      setOpenSections(\n        linked ? [] : [...openSections.filter((i) => i !== sectionId)],\n      );\n      onClose?.();\n    } else {\n      setOpenSections(linked ? [sectionId] : [...openSections, sectionId]);\n      onOpen?.();\n    }\n  };\n\n  return (\n    <section className={accordionSectionClass}>\n      <button\n        className={classNames([accordionButtonClass])}\n        onClick={handleClick}\n      >\n        <h3 className={accordionHeadingTitleClass}>{title}</h3>\n        <SystemIcon.Close\n          className={classNames(accordionToggleIconClass, {\n            isOpen,\n          })}\n          size=\"sm\"\n        />\n      </button>\n\n      {children && isOpen && (\n        <ul className={navAccordionListClass}>\n          {Children.map(children, (child) => {\n            const Element = child.type === NavAccordionGroup ? 'ul' : 'li';\n            const className =\n              Element === 'ul'\n                ? navAccordionListClass\n                : navAccordionListItemClass;\n            return <Element className={className}>{child}</Element>;\n          })}\n        </ul>\n      )}\n    </section>\n  );\n};\n"]}