{"version":3,"file":"NavAccordionGroup.js","sourceRoot":"","sources":["../../../../src/components/NavAccordion/NavAccordionGroup.tsx"],"names":[],"mappings":";AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACb,uEAA2E;AAC3E,2CAA8C;AAC9C,4DAAoC;AAEpC,+CAAkD;AAClD,yDAO4B;AAUrB,MAAM,iBAAiB,GAAgC,CAAC,EAC7D,QAAQ,EACR,OAAO,EACP,MAAM,EACN,KAAK,GACN,EAAE,EAAE;IACH,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IAC5C,MAAM,WAAW,GAAG,GAAS,EAAE;QAC7B,IAAI,MAAM,EAAE;YACV,OAAO,aAAP,OAAO,uBAAP,OAAO,EAAI,CAAC;SACb;aAAM;YACL,MAAM,aAAN,MAAM,uBAAN,MAAM,EAAI,CAAC;SACZ;QACD,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC;IACrB,CAAC,CAAC;IAEF,OAAO,CACL;QACE,0CACE,SAAS,EAAE,IAAA,oBAAU,EAAC;gBACpB,oCAAoB;gBACpB,+CAA4B;aAC7B,CAAC,EACF,OAAO,EAAE,WAAW;YAEpB,8BAAC,iBAAU,CAAC,WAAW,IACrB,SAAS,EAAE,IAAA,oBAAU,EAAC,6CAA0B,EAAE;oBAChD,MAAM;iBACP,CAAC,EACF,IAAI,EAAC,IAAI,GACT;YACF,wCAAM,SAAS,EAAE,8CAA2B,IAAG,KAAK,CAAQ,CACrD;QAER,QAAQ,IAAI,MAAM,IAAI,CACrB,sCACE,SAAS,EAAE,IAAA,oBAAU,EAAC;gBACpB,wCAAqB;gBACrB,6CAA0B;aAC3B,CAAC,IAED,gBAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,CACjC,sCAAI,SAAS,EAAE,iDAA8B,IAAG,KAAK,CAAM,CAC5D,CAAC,CACC,CACN,CACG,CACP,CAAC;AACJ,CAAC,CAAC;AAhDW,QAAA,iBAAiB,qBAgD5B","sourcesContent":["'use client';\nimport { accordionButtonClass } from '@components/Accordion/Accordion.css';\nimport { SystemIcon } from '@components/Icon';\nimport classNames from 'classnames';\nimport type { FC, FunctionComponentElement } from 'react';\nimport React, { Children, useState } from 'react';\nimport {\n  navAccordionGroupButtonClass,\n  navAccordionGroupIconClass,\n  navAccordionGroupListClass,\n  navAccordionGroupListItemClass,\n  navAccordionGroupTitleClass,\n  navAccordionListClass,\n} from './NavAccordion.css';\nimport type { INavAccordionLinkProps } from './NavAccordionLink';\n\nexport interface INavAccordionGroupProps {\n  children: FunctionComponentElement<INavAccordionLinkProps>[];\n  onClose?: () => void;\n  onOpen?: () => void;\n  title: string;\n}\n\nexport const NavAccordionGroup: FC<INavAccordionGroupProps> = ({\n  children,\n  onClose,\n  onOpen,\n  title,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const handleClick = (): void => {\n    if (isOpen) {\n      onClose?.();\n    } else {\n      onOpen?.();\n    }\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div>\n      <button\n        className={classNames([\n          accordionButtonClass,\n          navAccordionGroupButtonClass,\n        ])}\n        onClick={handleClick}\n      >\n        <SystemIcon.ChevronDown\n          className={classNames(navAccordionGroupIconClass, {\n            isOpen,\n          })}\n          size=\"sm\"\n        />\n        <span className={navAccordionGroupTitleClass}>{title}</span>\n      </button>\n\n      {children && isOpen && (\n        <ul\n          className={classNames([\n            navAccordionListClass,\n            navAccordionGroupListClass,\n          ])}\n        >\n          {Children.map(children, (child) => (\n            <li className={navAccordionGroupListItemClass}>{child}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n"]}