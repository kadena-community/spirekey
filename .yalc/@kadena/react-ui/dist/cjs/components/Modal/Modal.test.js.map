{"version":3,"file":"Modal.test.js","sourceRoot":"","sources":["../../../../src/components/Modal/Modal.test.tsx"],"names":[],"mappings":";;;;;AAAA,kDAAwD;AACxD,6EAAoD;AAEpD,kDAA0B;AAC1B,mCAAkD;AAElD,iDAAuD;AAEvD,mCAAgC;AAOhC,MAAM,OAAO,GAAsB,CAAC,EAClC,MAAM,EACN,WAAW,EACX,YAAY,EACZ,QAAQ,EACR,GAAG,KAAK,EACT,EAAE,EAAE;IACH,MAAM,KAAK,GAAG,IAAA,sCAAsB,EAAC;QACnC,MAAM;QACN,WAAW;QACX,YAAY;KACb,CAAC,CAAC;IACH,OAAO,CACL,8BAAC,aAAK,IAAC,KAAK,EAAE,KAAK,KAAM,KAAK,IAC3B,QAAQ,CACH,CACT,CAAC;AACJ,CAAC,CAAC;AACF,IAAA,iBAAQ,EAAC,OAAO,EAAE,GAAG,EAAE;IACrB,IAAA,WAAE,EAAC,qCAAqC,EAAE,GAAG,EAAE;QAC7C,IAAA,cAAM,EACJ,8BAAC,OAAO,IAAC,MAAM;YACb,2DAAwB,CAChB,CACX,CAAC;QAEF,IAAA,eAAM,EAAC,cAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,kDAAkD,EAAE,GAAG,EAAE;QAC1D,IAAA,cAAM,EACJ,8BAAC,OAAO,IAAC,WAAW;YAClB,2DAAwB,CAChB,CACX,CAAC;QACF,IAAA,eAAM,EAAC,cAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;IAChE,CAAC,CAAC,CAAC;IACH,IAAA,WAAE,EAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;QACvE,IAAA,cAAM,EACJ,8BAAC,OAAO,IAAC,WAAW;YAClB,2DAAwB,CAChB,CACX,CAAC;QACF,MAAM,oBAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC7C,IAAA,eAAM,EAAC,cAAM,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC;IACtE,CAAC,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;QACnE,MAAM,OAAO,GAAG,WAAE,CAAC,EAAE,EAAE,CAAC;QACxB,MAAM,QAAQ,GAAO,GAAG,EAAE;YACxB,MAAM,KAAK,GAAG,IAAA,sCAAsB,EAAC;gBACnC,MAAM,EAAE,IAAI;gBACZ,YAAY,EAAE,OAAO;aACtB,CAAC,CAAC;YACH,OAAO,CACL,8BAAC,aAAK,IAAC,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE,KAAK,IACtC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;gBACd,OAAO,CACL,0CAAS,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,SAAS;oBACjC,2DAAwB;oBACxB,0CAAQ,OAAO,EAAE,KAAK,CAAC,KAAK,YAAgB,CACxC,CACP,CAAC;YACJ,CAAC,CACK,CACT,CAAC;QACJ,CAAC,CAAC;QAEF,IAAA,cAAM,EAAC,8BAAC,QAAQ,OAAG,CAAC,CAAC;QAErB,MAAM,oBAAS,CAAC,KAAK,CAAC,cAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QACjD,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { describe, expect, it, vi } from 'vitest';\n\nimport { useOverlayTriggerState } from 'react-stately';\nimport type { IModalProps } from './Modal';\nimport { Modal } from './Modal';\n\ninterface ITestBedProps extends Omit<IModalProps, 'state'> {\n  isOpen?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (isOpen: boolean) => void;\n}\nconst TestBed: FC<ITestBedProps> = ({\n  isOpen,\n  defaultOpen,\n  onOpenChange,\n  children,\n  ...props\n}) => {\n  const state = useOverlayTriggerState({\n    isOpen,\n    defaultOpen,\n    onOpenChange,\n  });\n  return (\n    <Modal state={state} {...props}>\n      {children}\n    </Modal>\n  );\n};\ndescribe('Modal', () => {\n  it('should render the provided children', () => {\n    render(\n      <TestBed isOpen>\n        <div>Hello, world!</div>\n      </TestBed>,\n    );\n\n    expect(screen.getByText('Hello, world!')).toBeInTheDocument();\n  });\n\n  it('should render the modal when defaultOpen is true', () => {\n    render(\n      <TestBed defaultOpen>\n        <div>Hello, world!</div>\n      </TestBed>,\n    );\n    expect(screen.getByText('Hello, world!')).toBeInTheDocument();\n  });\n  it('should dismiss the modal when the escape key is pressed', async () => {\n    render(\n      <TestBed defaultOpen>\n        <div>Hello, world!</div>\n      </TestBed>,\n    );\n    await userEvent.type(document.body, '{esc}');\n    expect(screen.queryByText('Hello, world!')).not.toBeInTheDocument();\n  });\n\n  it('should not dismiss the modal isDismissable is false', async () => {\n    const onClose = vi.fn();\n    const TestBed2: FC = () => {\n      const state = useOverlayTriggerState({\n        isOpen: true,\n        onOpenChange: onClose,\n      });\n      return (\n        <Modal state={state} isDismissable={false}>\n          {(props, ref) => {\n            return (\n              <div {...props} ref={ref} autoFocus>\n                <div>Hello, world!</div>\n                <button onClick={state.close}>Close</button>\n              </div>\n            );\n          }}\n        </Modal>\n      );\n    };\n\n    render(<TestBed2 />);\n\n    await userEvent.click(screen.getByText('Close'));\n    expect(onClose).toHaveBeenCalledTimes(1);\n  });\n});\n"]}