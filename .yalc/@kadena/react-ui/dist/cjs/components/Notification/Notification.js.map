{"version":3,"file":"Notification.js","sourceRoot":"","sources":["../../../../src/components/Notification/Notification.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,mEAAwE;AACxE,+CAAyC;AACzC,4DAAoC;AAEpC,+CAAwC;AACxC,yDAO4B;AAYrB,MAAM,YAAY,GAA2B,CAAC,EACnD,QAAQ,EACR,cAAc,GAAG,KAAK,EACtB,KAAK,GAAG,MAAM,EACd,YAAY,GAAG,UAAU,EACzB,OAAO,EACP,IAAI,EACJ,IAAI,GACL,EAAE,EAAE;IACH,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IAChD,MAAM,SAAS,GAAG,IAAA,oBAAU,EAC1B,iCAAc,EACd,oCAAiB,CAAC,KAAK,CAAC,EACxB,kCAAe,CAAC,YAAY,CAAC,CAC9B,CAAC;IAEF,IAAI,QAAQ;QAAE,OAAO,IAAI,CAAC;IAE1B,OAAO,CACL,uCAAK,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI;QACnC,8BAAC,YAAG,IAAC,UAAU,EAAE,CAAC,IACf,IAAI,CAAC,CAAC,CAAC,CACN,wCAAM,SAAS,EAAE,4BAAS,IAAG,IAAI,CAAQ,CAC1C,CAAC,CAAC,CAAC,CACF,8BAAC,wBAAW,IAAC,IAAI,EAAC,IAAI,GAAG,CAC1B,CACG;QAEN,uCAAK,SAAS,EAAE,+BAAY,IAAG,QAAQ,CAAO;QAE7C,cAAc,IAAI,CACjB,0CACE,SAAS,EAAE,mCAAgB,EAC3B,OAAO,EAAE,GAAG,EAAE;gBACZ,WAAW,CAAC,IAAI,CAAC,CAAC;gBAClB,OAAO,aAAP,OAAO,uBAAP,OAAO,EAAI,CAAC;YACd,CAAC,gBACU,oBAAoB;YAE/B,8BAAC,kBAAK,IAAC,IAAI,EAAC,IAAI,GAAG,CACZ,CACV,CACG,CACP,CAAC;AACJ,CAAC,CAAC;AA5CW,QAAA,YAAY,gBA4CvB","sourcesContent":["// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport { Close, Information } from '@components/Icon/System/SystemIcon';\nimport { Box } from '@components/Layout';\nimport classNames from 'classnames';\nimport type { FC } from 'react';\nimport React, { useState } from 'react';\nimport {\n  cardColorVariants,\n  closeButtonClass,\n  containerClass,\n  contentClass,\n  displayVariants,\n  iconClass,\n} from './Notification.css';\n\nexport interface INotificationProps {\n  children?: React.ReactNode;\n  color?: keyof typeof cardColorVariants;\n  styleVariant?: keyof typeof displayVariants;\n  hasCloseButton?: boolean;\n  onClose?: () => void;\n  icon?: React.ReactNode;\n  role: 'alert' | 'status' | 'none';\n}\n\nexport const Notification: FC<INotificationProps> = ({\n  children,\n  hasCloseButton = false,\n  color = 'info',\n  styleVariant = 'bordered',\n  onClose,\n  icon,\n  role,\n}) => {\n  const [isClosed, setIsClosed] = useState(false);\n  const classList = classNames(\n    containerClass,\n    cardColorVariants[color],\n    displayVariants[styleVariant],\n  );\n\n  if (isClosed) return null;\n\n  return (\n    <div className={classList} role={role}>\n      <Box flexShrink={0}>\n        {icon ? (\n          <span className={iconClass}>{icon}</span>\n        ) : (\n          <Information size=\"md\" />\n        )}\n      </Box>\n\n      <div className={contentClass}>{children}</div>\n\n      {hasCloseButton && (\n        <button\n          className={closeButtonClass}\n          onClick={() => {\n            setIsClosed(true);\n            onClose?.();\n          }}\n          aria-label=\"Close Notification\"\n        >\n          <Close size=\"md\" />\n        </button>\n      )}\n    </div>\n  );\n};\n"]}