{"version":3,"file":"Notification.css.js","sourceRoot":"","sources":["../../../../src/components/Notification/Notification.css.ts"],"names":[],"mappings":"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","sourcesContent":["import { atoms } from '@theme/atoms.css';\nimport { tokens } from '@theme/tokens/contract.css';\nimport { createVar, style, styleVariants } from '@vanilla-extract/css';\nimport { recipe } from '@vanilla-extract/recipes';\n\nconst iconColorVar = createVar();\n\nconst semanticColors = ['info', 'positive', 'warning', 'negative'] as const;\ntype SemanticColor = (typeof semanticColors)[number];\n\nexport const notificationRecipe = recipe({\n  base: [\n    atoms({\n      display: 'flex',\n      alignItems: 'flex-start',\n      padding: 'md',\n      gap: 'sm',\n      width: '100%',\n    }),\n  ],\n  variants: {\n    intent: semanticColors.reduce(\n      (acc, color) => {\n        acc[color] = [\n          atoms({\n            backgroundColor: `semantic.${color}.default`,\n            borderColor: `semantic.${color}.default`,\n            color: `text.semantic.${color}.default`,\n          }),\n          {\n            vars: {\n              [iconColorVar]:\n                tokens.kda.foundation.color.icon.semantic[color]?.default,\n            },\n          },\n        ];\n        return acc;\n      },\n      {} as Record<(typeof semanticColors)[number], any>,\n    ),\n    displayStyle: {\n      bordered: [\n        atoms({\n          borderStyle: 'solid',\n          borderWidth: 'hairline',\n          borderRadius: 'sm',\n        }),\n        {\n          borderLeftWidth: tokens.kda.foundation.border.width.thick,\n        },\n      ],\n      borderless: [],\n    },\n  },\n  defaultVariants: {\n    intent: 'info',\n    displayStyle: 'bordered',\n  },\n});\n\nexport const closeButtonClass = style([\n  atoms({\n    marginInlineStart: 'auto',\n    padding: 'no',\n    border: 'none',\n    backgroundColor: 'transparent',\n    cursor: 'pointer',\n  }),\n  {\n    color: iconColorVar,\n  },\n]);\n\nexport const contentClass = style([\n  atoms({\n    fontSize: 'base',\n    gap: 'xs',\n    maxWidth: 'content.maxWidth',\n    marginBlockStart: 'xxs',\n  }),\n]);\n\nexport const titleClass = style([\n  atoms({\n    fontSize: 'base',\n    fontWeight: 'bodyFont.bold',\n    marginBlockEnd: 'xs',\n  }),\n]);\n\nexport const iconClass = style([\n  atoms({\n    flexShrink: 0,\n  }),\n  {\n    color: iconColorVar,\n    width: tokens.kda.foundation.icon.size.base,\n    height: tokens.kda.foundation.icon.size.base,\n  },\n]);\n\nexport const actionsContainerClass = style([\n  atoms({\n    marginBlockStart: 'md',\n    display: 'flex',\n    justifyContent: 'flex-start',\n    gap: 'xl',\n  }),\n]);\n\n/*\n  Action Button Styles\n*/\n\nconst actionIconVar = createVar();\n\nconst actionButtonBase = atoms({\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  backgroundColor: 'transparent',\n  border: 'none',\n  margin: 'no',\n  padding: 'no',\n  fontSize: 'base',\n  fontWeight: 'bodyFont.bold',\n  cursor: 'pointer',\n});\n\nconst actionButtonColors: Record<SemanticColor, SemanticColor> =\n  semanticColors.reduce((acc: any, color) => {\n    acc[color] = color;\n    return acc;\n  }, {});\n\nexport const actionButtonIntentVariants = styleVariants(\n  actionButtonColors,\n  (color) => {\n    return [\n      actionButtonBase,\n      atoms({\n        color: `text.semantic.${color}.default`,\n      }),\n      {\n        vars: {\n          [actionIconVar]:\n            tokens.kda.foundation.color.icon.semantic[color]?.default,\n        },\n      },\n    ];\n  },\n);\n\nexport const actionButtonIconClass = style([\n  atoms({\n    marginInlineStart: 'sm',\n  }),\n  {\n    color: actionIconVar,\n  },\n]);\n"]}