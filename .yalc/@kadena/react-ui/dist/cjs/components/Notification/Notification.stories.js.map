{"version":3,"file":"Notification.stories.js","sourceRoot":"","sources":["../../../../src/components/Notification/Notification.stories.tsx"],"names":[],"mappings":";;;;;;AAAA,2CAA8C;AAE9C,2DAAwD;AAExD,kDAA0B;AAC1B,yDAAoE;AAEpE,MAAM,IAAI,GAIN;IACF,KAAK,EAAE,yBAAyB;IAChC,UAAU,EAAE;QACV,IAAI,EAAE;YACJ,WAAW,EAAE;gBACX,SAAS,EACP,0JAA0J;aAC7J;SACF;KACF;IACD,QAAQ,EAAE;QACR,OAAO,EAAE;YACP,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,kCAAe,CAAqC;YACzE,OAAO,EAAE;gBACP,IAAI,EAAE,QAAQ;aACf;SACF;QACD,IAAI,EAAE;YACJ,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,iBAAU,CAAgC;YAC/D,OAAO,EAAE;gBACP,IAAI,EAAE,QAAQ;aACf;SACF;QACD,KAAK,EAAE;YACL,OAAO,EAAE;gBACP,IAAI,EAAE,MAAM;aACb;SACF;QACD,KAAK,EAAE;YACL,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,gCAAa,CAAC;YACnC,OAAO,EAAE;gBACP,IAAI,EAAE,QAAQ;aACf;SACF;QACD,QAAQ,EAAE;YACR,OAAO,EAAE;gBACP,IAAI,EAAE,SAAS;aAChB;SACF;QACD,cAAc,EAAE;YACd,OAAO,EAAE;gBACP,IAAI,EAAE,SAAS;aAChB;SACF;QACD,MAAM,EAAE;YACN,OAAO,EAAE;gBACP,IAAI,EAAE,SAAS;aAChB;SACF;KACF;CACF,CAAC;AAEF,kBAAe,IAAI,CAAC;AAaP,QAAA,OAAO,GAAU;IAC5B,IAAI,EAAE,cAAc;IACpB,IAAI,EAAE;QACJ,IAAI,EAAE,aAAa;QACnB,KAAK,EAAE,oBAAoB;QAC3B,cAAc,EAAE,IAAI;QACpB,QAAQ,EAAE,KAAK;QACf,KAAK,EAAE,SAAS;QAChB,IAAI,EAAE,kEAAkE;QACxE,OAAO,EAAE,UAAU;QACnB,MAAM,EAAE,KAAK;KACd;IACD,MAAM,EAAE,CAAC,EACP,IAAI,EACJ,KAAK,EACL,cAAc,EACd,QAAQ,EACR,KAAK,EACL,IAAI,EACJ,OAAO,EACP,MAAM,GACP,EAAE,EAAE;QACH,OAAO,CACL,8BAAC,2BAAY,CAAC,IAAI,IAChB,IAAI,EAAE,IAAI,EACV,QAAQ,EAAE,QAAQ,EAClB,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,KAAK,EACZ,cAAc,EAAE,cAAc,EAC9B,OAAO,EAAE,GAAG,EAAE;gBACZ,KAAK,CAAC,sBAAsB,CAAC,CAAC;YAChC,CAAC,EACD,OAAO,EAAE,OAAO,EAChB,MAAM,EAAE,MAAM;YAEb,IAAI;YACL,8BAAC,2BAAY,CAAC,OAAO;gBACnB,8BAAC,2BAAY,CAAC,MAAM,IAAC,IAAI,EAAC,OAAO,EAAC,KAAK,EAAE,UAAU,aAE7B;gBACtB,8BAAC,2BAAY,CAAC,MAAM,IAAC,IAAI,EAAC,OAAO,EAAC,KAAK,EAAE,UAAU,aAE7B,CACD,CACL,CACrB,CAAC;IACJ,CAAC;CACF,CAAC","sourcesContent":["import { SystemIcon } from '@components/Icon';\nimport type { INotificationProps } from '@components/Notification';\nimport { Notification } from '@components/Notification';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport React from 'react';\nimport { colorVariants, displayVariants } from './Notification.css';\n\nconst meta: Meta<\n  {\n    text: string;\n  } & INotificationProps\n> = {\n  title: 'Components/Notification',\n  parameters: {\n    docs: {\n      description: {\n        component:\n          'The Notification component renders a notification with an icon, title, and text. The color variant of the notification can be set with the `color` prop.',\n      },\n    },\n  },\n  argTypes: {\n    variant: {\n      options: Object.keys(displayVariants) as (keyof typeof displayVariants)[],\n      control: {\n        type: 'select',\n      },\n    },\n    icon: {\n      options: Object.keys(SystemIcon) as (keyof typeof SystemIcon)[],\n      control: {\n        type: 'select',\n      },\n    },\n    title: {\n      control: {\n        type: 'text',\n      },\n    },\n    color: {\n      options: Object.keys(colorVariants),\n      control: {\n        type: 'select',\n      },\n    },\n    expanded: {\n      control: {\n        type: 'boolean',\n      },\n    },\n    hasCloseButton: {\n      control: {\n        type: 'boolean',\n      },\n    },\n    inline: {\n      control: {\n        type: 'boolean',\n      },\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<\n  {\n    text: string;\n  } & INotificationProps\n>;\n\n/*\n *ðŸ‘‡ Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/7.0/react/api/csf\n * to learn how to use render functions.\n */\n\nexport const Primary: Story = {\n  name: 'Notification',\n  args: {\n    icon: 'Information',\n    title: 'Notification title',\n    hasCloseButton: true,\n    expanded: false,\n    color: undefined,\n    text: 'Notification text to inform users about the event that occurred!',\n    variant: 'standard',\n    inline: false,\n  },\n  render: ({\n    icon,\n    title,\n    hasCloseButton,\n    expanded,\n    color,\n    text,\n    variant,\n    inline,\n  }) => {\n    return (\n      <Notification.Root\n        icon={icon}\n        expanded={expanded}\n        color={color}\n        title={title}\n        hasCloseButton={hasCloseButton}\n        onClose={() => {\n          alert('Close button clicked');\n        }}\n        variant={variant}\n        inline={inline}\n      >\n        {text}\n        <Notification.Actions>\n          <Notification.Button icon=\"Check\" color={'positive'}>\n            Accept\n          </Notification.Button>\n          <Notification.Button icon=\"Close\" color={'negative'}>\n            Reject\n          </Notification.Button>\n        </Notification.Actions>\n      </Notification.Root>\n    );\n  },\n};\n"]}