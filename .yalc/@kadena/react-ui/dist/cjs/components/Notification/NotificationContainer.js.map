{"version":3,"file":"NotificationContainer.js","sourceRoot":"","sources":["../../../../src/components/Notification/NotificationContainer.tsx"],"names":[],"mappings":";;;;;;AACA,2CAA8C;AAC9C,4DAAoC;AAEpC,kDAA0B;AAE1B,yDAW4B;AAcrB,MAAM,qBAAqB,GAA2B,CAAC,EAC5D,IAAI,EACJ,KAAK,EACL,QAAQ,EACR,cAAc,GAAG,KAAK,EACtB,KAAK,GAAG,MAAM,EACd,QAAQ,GAAG,KAAK,EAChB,OAAO,EACP,OAAO,GAAG,UAAU,EACpB,MAAM,GAAG,KAAK,GACf,EAAE,EAAE;IACH,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,iBAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,iBAAU,CAAC,UAAU,CAAC;IAE7D,MAAM,mBAAmB,GAAG,iCAAc,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;IAEtE,MAAM,SAAS,GAAG,IAAA,oBAAU,EAC1B,iCAAc,EACd,oCAAiB,CAAC,KAAK,CAAC,EACxB,kCAAe,CAAC,OAAO,CAAC,EACxB,iCAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,EAC3C,mBAAmB,CACpB,CAAC;IAEF,MAAM,gBAAgB,GAAG,IAAA,oBAAU,EAAC,+BAAY,EAAE,mBAAmB,CAAC,CAAC;IAEvE,MAAM,oBAAoB,GAAG,IAAA,oBAAU,EACrC,mCAAgB,EAChB,mBAAmB,CACpB,CAAC;IAEF,OAAO,CACL,uCAAK,SAAS,EAAE,SAAS;QACvB,uCAAK,SAAS,EAAE,wCAAqB;YACnC,8BAAC,IAAI,IAAC,IAAI,EAAC,IAAI,GAAG;YAElB,uCAAK,SAAS,EAAE,gBAAgB;gBAC7B,KAAK,IAAI,wCAAM,SAAS,EAAE,6BAAU,IAAG,KAAK,CAAQ;gBACrD,uCAAK,SAAS,EAAE,oBAAoB,IAAG,QAAQ,CAAO,CAClD;YAEL,cAAc,IAAI,CACjB,0CACE,SAAS,EAAE,mCAAgB,EAC3B,OAAO,EAAE,OAAO,gBACL,oBAAoB;gBAE/B,8BAAC,iBAAU,CAAC,KAAK,IAAC,IAAI,EAAC,IAAI,GAAG,CACvB,CACV,CACG,CACF,CACP,CAAC;AACJ,CAAC,CAAC;AApDW,QAAA,qBAAqB,yBAoDhC","sourcesContent":["// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport { SystemIcon } from '@components/Icon';\nimport classNames from 'classnames';\nimport type { FC } from 'react';\nimport React from 'react';\nimport type { colorVariants } from './Notification.css';\nimport {\n  cardColorVariants,\n  closeButtonClass,\n  containerClass,\n  containerWrapperClass,\n  contentClass,\n  descriptionClass,\n  displayVariants,\n  expandVariants,\n  inlineVariants,\n  titleClass,\n} from './Notification.css';\n\nexport interface INotificationProps {\n  icon?: keyof typeof SystemIcon;\n  title?: string;\n  children?: React.ReactNode;\n  expanded?: boolean;\n  color?: keyof typeof colorVariants;\n  hasCloseButton?: boolean;\n  onClose?: () => void;\n  variant?: keyof typeof displayVariants;\n  inline?: boolean;\n}\n\nexport const NotificationContainer: FC<INotificationProps> = ({\n  icon,\n  title,\n  children,\n  hasCloseButton = false,\n  color = 'info',\n  expanded = false,\n  onClose,\n  variant = 'standard',\n  inline = false,\n}) => {\n  const Icon = icon ? SystemIcon[icon] : SystemIcon.HelpCircle;\n\n  const inlineVariantsClass = inlineVariants[inline ? 'true' : 'false'];\n\n  const classList = classNames(\n    containerClass,\n    cardColorVariants[color],\n    displayVariants[variant],\n    expandVariants[expanded ? 'true' : 'false'],\n    inlineVariantsClass,\n  );\n\n  const contentClassList = classNames(contentClass, inlineVariantsClass);\n\n  const descriptionClassList = classNames(\n    descriptionClass,\n    inlineVariantsClass,\n  );\n\n  return (\n    <div className={classList}>\n      <div className={containerWrapperClass}>\n        <Icon size=\"md\" />\n\n        <div className={contentClassList}>\n          {title && <span className={titleClass}>{title}</span>}\n          <div className={descriptionClassList}>{children}</div>\n        </div>\n\n        {hasCloseButton && (\n          <button\n            className={closeButtonClass}\n            onClick={onClose}\n            aria-label=\"Close Notification\"\n          >\n            <SystemIcon.Close size=\"md\" />\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n"]}