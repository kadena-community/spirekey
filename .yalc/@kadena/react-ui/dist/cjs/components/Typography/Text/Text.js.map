{"version":3,"file":"Text.js","sourceRoot":"","sources":["../../../../../src/components/Typography/Text/Text.tsx"],"names":[],"mappings":";;;;;;AAAA,4DAA4B;AAE5B,kDAA0B;AAC1B,yCAOoB;AAab,MAAM,IAAI,GAAmB,CAAC,EACnC,EAAE,GAAG,MAAM,EACX,OAAO,GAAG,EAAE,EACZ,IAAI,GAAG,OAAO,KAAK,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAC3C,IAAI,GAAG,KAAK,EACZ,IAAI,GAAG,IAAI,EACX,KAAK,GAAG,SAAS,EACjB,SAAS,GAAG,MAAM,EAClB,QAAQ,GACT,EAAE,EAAE;IACH,MAAM,SAAS,GAAG,IAAA,oBAAE,EAClB,yBAAc,CAAC,OAAO,CAAC,EACvB,sBAAW,CAAC,IAAI,CAAC,EACjB,sBAAW,CAAC,IAAI,CAAC,EACjB,uBAAY,CAAC,KAAK,CAAC,EACnB,2BAAgB,CAAC,SAAS,CAAC,EAC3B,EAAE,CAAC,oBAAS,CAAC,EAAE,IAAI,EAAE,CACtB,CAAC;IAEF,QAAQ,EAAE,EAAE;QACV,KAAK,GAAG;YACN,OAAO,qCAAG,SAAS,EAAE,SAAS,IAAG,QAAQ,CAAK,CAAC;QACjD,KAAK,MAAM;YACT,OAAO,wCAAM,SAAS,EAAE,SAAS,IAAG,QAAQ,CAAQ,CAAC;QACvD,KAAK,MAAM,CAAC;QACZ;YACE,OAAO,wCAAM,SAAS,EAAE,SAAS,IAAG,QAAQ,CAAQ,CAAC;KACxD;AACH,CAAC,CAAC;AA5BW,QAAA,IAAI,QA4Bf","sourcesContent":["import cn from 'classnames';\nimport type { FC } from 'react';\nimport React from 'react';\nimport {\n  boldClass,\n  colorVariant,\n  elementVariant,\n  fontVariant,\n  sizeVariant,\n  transformVariant,\n} from './Text.css';\n\nexport interface ITextProps {\n  as?: keyof typeof elementVariant;\n  variant?: keyof typeof elementVariant;\n  font?: keyof typeof fontVariant;\n  bold?: boolean;\n  color?: keyof typeof colorVariant;\n  transform?: keyof typeof transformVariant;\n  size?: keyof typeof sizeVariant;\n  children: React.ReactNode;\n}\n\nexport const Text: FC<ITextProps> = ({\n  as = 'span',\n  variant = as,\n  font = variant === 'code' ? 'mono' : 'main',\n  bold = false,\n  size = 'lg',\n  color = 'default',\n  transform = 'none',\n  children,\n}) => {\n  const classList = cn(\n    elementVariant[variant],\n    fontVariant[font],\n    sizeVariant[size],\n    colorVariant[color],\n    transformVariant[transform],\n    { [boldClass]: bold },\n  );\n\n  switch (as) {\n    case 'p':\n      return <p className={classList}>{children}</p>;\n    case 'code':\n      return <code className={classList}>{children}</code>;\n    case 'span':\n    default:\n      return <span className={classList}>{children}</span>;\n  }\n};\n"]}