{"version":3,"file":"Textarea.stories.js","sourceRoot":"","sources":["../../../../../src/components/Form/Textarea/Textarea.stories.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,2CAA4C;AAE5C,uDAA8D;AAC9D,+CAAwC;AAExC,MAAM,IAAI,GAAyB;IACjC,KAAK,EAAE,wBAAwB;IAC/B,SAAS,EAAE,eAAQ;IACnB,UAAU,EAAE,CAAC,mCAAgB,EAAE,2BAAQ,CAAC;IACxC,UAAU,EAAE;QACV,MAAM,EAAE,EAAE,IAAI,EAAE,eAAe,EAAE;QACjC,IAAI,EAAE;YACJ,WAAW,EAAE;gBACX,SAAS,EACP,iIAAiI;aACpI;SACF;KACF;IACD,QAAQ,EAAE;QACR,QAAQ,EAAE;YACR,WAAW,EAAE,mDAAmD;YAChE,OAAO,EAAE;gBACP,IAAI,EAAE,SAAS;aAChB;YACD,KAAK,EAAE;gBACL,IAAI,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE;gBAC5B,YAAY,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE;aACnC;SACF;KACF;CACF,CAAC;AAEF,kBAAe,IAAI,CAAC;AAIP,QAAA,aAAa,GAAU;IAClC,IAAI,EAAE,UAAU;IAChB,IAAI,EAAE;QACJ,QAAQ,EAAE,KAAK;QACf,UAAU,EAAE,UAAU;QACtB,QAAQ,EAAE,KAAK;KAChB;IACD,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE;QAChB,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,IAAA,gBAAQ,EAAS,EAAE,CAAC,CAAC;QAE/C,OAAO,CACL,8BAAC,eAAQ,OACH,KAAK,EACT,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,EAChD,EAAE,EAAC,eAAe,EAClB,WAAW,EAAC,uBAAuB,GACnC,CACH,CAAC;IACJ,CAAC;CACF,CAAC","sourcesContent":["import type { ITextareaProps } from '@components/Form';\nimport { Textarea } from '@components/Form';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { onLayer2, withContentWidth } from '@storyDecorators';\nimport React, { useState } from 'react';\n\nconst meta: Meta<ITextareaProps> = {\n  title: 'Form/Textarea/Textarea',\n  component: Textarea,\n  decorators: [withContentWidth, onLayer2],\n  parameters: {\n    status: { type: 'inDevelopment' },\n    docs: {\n      description: {\n        component:\n          'The Textarea component is a wrapper around the native textArea element that provides the ability to add additional information.',\n      },\n    },\n  },\n  argTypes: {\n    disabled: {\n      description: 'Disables the textArea and applies visual styling.',\n      control: {\n        type: 'boolean',\n      },\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: 'false' },\n      },\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ITextareaProps>;\n\nexport const TextareaStory: Story = {\n  name: 'Textarea',\n  args: {\n    disabled: false,\n    fontFamily: 'codeFont',\n    outlined: false,\n  },\n  render: (props) => {\n    const [value, setValue] = useState<string>('');\n\n    return (\n      <Textarea\n        {...props}\n        value={value}\n        onChange={({ target }) => setValue(target.value)}\n        id=\"TextareaStory\"\n        placeholder=\"This is a placeholder\"\n      />\n    );\n  },\n};\n"]}