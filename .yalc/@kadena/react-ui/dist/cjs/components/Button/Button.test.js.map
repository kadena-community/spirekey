{"version":3,"file":"Button.test.js","sourceRoot":"","sources":["../../../../src/components/Button/Button.test.tsx"],"names":[],"mappings":";;;;;AAAA,+CAA4C;AAC5C,kDAAgD;AAChD,kDAA0B;AAE1B,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACtB,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,EAAE,WAAW,EAAE,GAAG,IAAA,cAAM,EAC5B,8BAAC,eAAM,IAAC,KAAK,EAAC,QAAQ,qBAAwB,CAC/C,CAAC;QAEF,MAAM,eAAe,GAAG,WAAW,CAAC,YAAY,CAAC,CAAC;QAClD,MAAM,CAAC,eAAe,CAAC,CAAC,iBAAiB,EAAE,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;QAC1D,MAAM,EAAE,WAAW,EAAE,GAAG,IAAA,cAAM,EAC5B,8BAAC,eAAM,IAAC,KAAK,EAAC,QAAQ,EAAC,QAAQ,2BAEtB,CACV,CAAC;QAEF,MAAM,eAAe,GAAG,WAAW,CAAC,YAAY,CAAsB,CAAC;QAEvE,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QAC3D,MAAM,EAAE,WAAW,EAAE,GAAG,IAAA,cAAM,EAC5B,8BAAC,eAAM,IAAC,KAAK,EAAC,QAAQ,EAAC,EAAE,EAAC,GAAG,EAAC,IAAI,EAAC,oBAAoB,qBAE9C,CACV,CAAC;QAEF,MAAM,eAAe,GAAG,WAAW,CAAC,YAAY,CAAsB,CAAC;QAEvE,MAAM,CAAC,eAAe,CAAC,QAAQ,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;QACpE,MAAM,EAAE,WAAW,EAAE,GAAG,IAAA,cAAM,EAC5B,8BAAC,eAAM,IAAC,KAAK,EAAC,QAAQ,EAAC,EAAE,EAAC,GAAG,qBAEpB,CACV,CAAC;QAEF,MAAM,eAAe,GAAG,WAAW,CAAC,YAAY,CAAsB,CAAC;QAEvE,MAAM,CAAC,eAAe,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { Button } from '@components/Button';\nimport { render } from '@testing-library/react';\nimport React from 'react';\n\ndescribe('Button', () => {\n  it('renders correctly', () => {\n    const { getByTestId } = render(\n      <Button title=\"Button\">Hello, Button!</Button>,\n    );\n\n    const buttonContainer = getByTestId('kda-button');\n    expect(buttonContainer).toBeInTheDocument();\n  });\n\n  it('disables the button when `disabled` prop is true', () => {\n    const { getByTestId } = render(\n      <Button title=\"Button\" disabled>\n        Hello, Button!\n      </Button>,\n    );\n\n    const buttonContainer = getByTestId('kda-button') as HTMLButtonElement;\n\n    expect(buttonContainer.disabled).toBe(true);\n  });\n\n  it('renders as an anchor element when `as` prop = \"a\"', () => {\n    const { getByTestId } = render(\n      <Button title=\"Button\" as=\"a\" href=\"https://kadena.io/\">\n        Hello, Button!\n      </Button>,\n    );\n\n    const buttonContainer = getByTestId('kda-button') as HTMLAnchorElement;\n\n    expect(buttonContainer.nodeName === 'A').toBe(true);\n  });\n\n  it('requires the `href` prop to be set when rendered as anchor', () => {\n    const { getByTestId } = render(\n      <Button title=\"Button\" as=\"a\">\n        Hello, Button!\n      </Button>,\n    );\n\n    const buttonContainer = getByTestId('kda-button') as HTMLAnchorElement;\n\n    expect(buttonContainer.nodeName === 'BUTTON').toBe(true);\n  });\n});\n"]}