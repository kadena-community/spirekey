{"version":3,"file":"themeUtils.js","sourceRoot":"","sources":["../../../src/styles/themeUtils.ts"],"names":[],"mappings":";;;;;;AAEA,8DAA+B;AAGlB,QAAA,WAAW,GAAG;IACzB,EAAE,EAAE,EAAE;IACN,EAAE,EAAE,0BAA0B,GAAG,GAAG,EAAE,MAAM;IAC5C,EAAE,EAAE,0BAA0B,GAAG,GAAG,EAAE,MAAM;IAC5C,EAAE,EAAE,0BAA0B,IAAI,GAAG,EAAE,MAAM;IAC7C,EAAE,EAAE,0BAA0B,IAAI,GAAG,EAAE,MAAM;IAC7C,GAAG,EAAE,0BAA0B,IAAI,GAAG,EAAE,MAAM;CAC/C,CAAC;AAKF,MAAM,cAAc,GAClB,CACE,UAAsB,EAGrB,EAAE,CACL,CAAC,MAAgB,EAAE,EAAE,CACnB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,CAAC;IAC9B,CAAC,CAAC,EAAE;IACJ,CAAC,CAAC;QACE,CAAC,mBAAW,CAAC,UAAU,CAAW,CAAC,EAAE,MAAM;KAC5C,CAAC;AAGV,MAAM,UAAU,GAAG;IACjB,EAAE,EAAE,cAAc,CAAC,IAAI,CAAC;IACxB,EAAE,EAAE,cAAc,CAAC,IAAI,CAAC;IACxB,EAAE,EAAE,cAAc,CAAC,IAAI,CAAC;IACxB,EAAE,EAAE,cAAc,CAAC,IAAI,CAAC;IACxB,GAAG,EAAE,cAAc,CAAC,KAAK,CAAC;CAClB,CAAC;AAEJ,MAAM,eAAe,GAAG,CAAC,EAC9B,EAAE,EACF,EAAE,EACF,EAAE,EACF,EAAE,EACF,EAAE,EACF,GAAG,GACmC,EAAa,EAAE,CAAC,CAAC;IACvD,GAAG,IAAA,qBAAI,EAAC,EAAE,EAAE,QAAQ,CAAC;IACrB,GAAG,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,GAAG;QAC7B,CAAC,CAAC;YACE,QAAQ,EAAE;gBACR,GAAG,UAAU,CAAC,EAAE,CAAC,EAAE,aAAF,EAAE,cAAF,EAAE,GAAI,EAAE,CAAC;gBAC1B,GAAG,UAAU,CAAC,EAAE,CAAC,EAAE,aAAF,EAAE,cAAF,EAAE,GAAI,EAAE,CAAC;gBAC1B,GAAG,UAAU,CAAC,EAAE,CAAC,EAAE,aAAF,EAAE,cAAF,EAAE,GAAI,EAAE,CAAC;gBAC1B,GAAG,UAAU,CAAC,EAAE,CAAC,EAAE,aAAF,EAAE,cAAF,EAAE,GAAI,EAAE,CAAC;gBAC1B,GAAG,UAAU,CAAC,GAAG,CAAC,GAAG,aAAH,GAAG,cAAH,GAAG,GAAI,EAAE,CAAC;aAC7B;SACF;QACH,CAAC,CAAC,EAAE,CAAC;CACR,CAAC,CAAC;AApBU,QAAA,eAAe,mBAoBzB;AAEI,MAAM,aAAa,GACxB,CACE,QAAkB,EAClB,UAAuB,EACkB,EAAE,CAC7C,CAAC,KAAsB,EAAE,EAAE;IACzB,MAAM,SAAS,GAAG,EAAE,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC;IAExC,OAAO,UAAU;QACf,CAAC,CAAC,IAAA,uBAAe,EAAC,EAAE,CAAC,UAAU,CAAC,EAAE,SAAS,EAAE,CAAC;QAC9C,CAAC,CAAC,SAAS,CAAC;AAChB,CAAC,CAAC;AAXS,QAAA,aAAa,iBAWtB","sourcesContent":["import type { StyleRule } from '@vanilla-extract/css';\nimport type { Properties } from 'csstype';\nimport omit from 'lodash.omit';\n\n// eslint-disable-next-line @kadena-dev/typedef-var\nexport const breakpoints = {\n  xs: '',\n  sm: `screen and (min-width: ${640 / 16}rem)`,\n  md: `screen and (min-width: ${768 / 16}rem)`,\n  lg: `screen and (min-width: ${1024 / 16}rem)`,\n  xl: `screen and (min-width: ${1280 / 16}rem)`,\n  xxl: `screen and (min-width: ${1536 / 16}rem)`,\n};\n\nexport type Breakpoint = keyof typeof breakpoints;\ntype CSSProps = Omit<StyleRule, '@media' | '@supports'>;\n\nconst makeMediaQuery =\n  (\n    breakpoint: Breakpoint,\n  ): ((styles: CSSProps) => {\n    [x: string]: CSSProps;\n  }) =>\n  (styles: CSSProps) =>\n    Object.keys(styles).length === 0\n      ? {}\n      : {\n          [breakpoints[breakpoint] as string]: styles,\n        };\n\n// eslint-disable-next-line @kadena-dev/typedef-var\nconst mediaQuery = {\n  sm: makeMediaQuery('sm'),\n  md: makeMediaQuery('md'),\n  lg: makeMediaQuery('lg'),\n  xl: makeMediaQuery('xl'),\n  xxl: makeMediaQuery('xxl'),\n} as const;\n\nexport const responsiveStyle = ({\n  xs,\n  sm,\n  md,\n  lg,\n  xl,\n  xxl,\n}: Partial<Record<Breakpoint, CSSProps>>): StyleRule => ({\n  ...omit(xs, '@media'),\n  ...(sm || md || lg || xl || xxl\n    ? {\n        '@media': {\n          ...mediaQuery.sm(sm ?? {}),\n          ...mediaQuery.md(md ?? {}),\n          ...mediaQuery.lg(lg ?? {}),\n          ...mediaQuery.xl(xl ?? {}),\n          ...mediaQuery.xxl(xxl ?? {}),\n        },\n      }\n    : {}),\n});\n\nexport const mapToProperty =\n  <Property extends keyof Properties<string | number>>(\n    property: Property,\n    breakpoint?: Breakpoint,\n  ): ((value: string | number) => StyleRule) =>\n  (value: string | number) => {\n    const styleRule = { [property]: value };\n\n    return breakpoint\n      ? responsiveStyle({ [breakpoint]: styleRule })\n      : styleRule;\n  };\n"]}